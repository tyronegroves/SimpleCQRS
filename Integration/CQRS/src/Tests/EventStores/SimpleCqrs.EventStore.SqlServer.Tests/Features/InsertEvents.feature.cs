// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.0.0
//      SpecFlow Generator Version:1.6.0.0
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace SimpleCqrs.EventStore.SqlServer.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Insert events")]
    public partial class InsertEventsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "InsertEvents.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Insert events", "In order to add events to my SQL Server event store\nAs a Simple CQRS developer\nI " +
                    "want to pass an array of events and have them added to the appropriate table", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
#line 7
 testRunner.Given("the connection string to my database is", "Data Source=.\\SQLEXPRESS;Initial Catalog=test;Integrated Security=True;MultipleAc" +
                    "tiveResultSets=True;", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Insert one domain event")]
        public virtual void InsertOneDomainEvent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Insert one domain event", ((string[])(null)));
#line 12
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1.AddRow(new string[] {
                        "EventDate",
                        "3/20/2010 3:01:04 AM"});
            table1.AddRow(new string[] {
                        "AggregateRootId",
                        "8312E92C-DF1C-4970-A9D5-6414120C3CF7"});
            table1.AddRow(new string[] {
                        "Sequence",
                        "2"});
            table1.AddRow(new string[] {
                        "ThisHappened",
                        "something"});
#line 13
 testRunner.Given("I have a SomethingHappenedEvent to be added to the store with the following value" +
                    "s", ((string)(null)), table1);
#line 19
 testRunner.And("that event will serialize to \'Serialized Object\'");
#line 20
 testRunner.When("I add the domain events to the store");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "EventDate",
                        "Data",
                        "Sequence",
                        "AggregateRootId",
                        "EventType"});
            table2.AddRow(new string[] {
                        "3/20/2010 3:01:04 AM",
                        "Serialized Object",
                        "2",
                        "8312E92C-DF1C-4970-A9D5-6414120C3CF7",
                        "SimpleCqrs.EventStore.SqlServer.Tests.SomethingHappenedEvent, SimpleCqrs.EventSto" +
                            "re.SqlServer.Tests"});
#line 21
 testRunner.Then("I should have the following events in the database", ((string)(null)), table2);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Insert two domain events")]
        public virtual void InsertTwoDomainEvents()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Insert two domain events", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "EventDate",
                        "3/20/2010 3:01:04 AM"});
            table3.AddRow(new string[] {
                        "AggregateRootId",
                        "8312E92C-DF1C-4970-A9D5-6414120C3CF7"});
            table3.AddRow(new string[] {
                        "Sequence",
                        "2"});
            table3.AddRow(new string[] {
                        "ThisHappened",
                        "something"});
#line 26
 testRunner.Given("I have a SomethingHappenedEvent to be added to the store with the following value" +
                    "s", ((string)(null)), table3);
#line 32
 testRunner.And("that event will serialize to \'The First Record\'");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "EventDate",
                        "4/24/2010 3:01:04 AM"});
            table4.AddRow(new string[] {
                        "AggregateRootId",
                        "C3579C12-C29B-4F65-8D83-B79AC5C85718"});
            table4.AddRow(new string[] {
                        "Sequence",
                        "4"});
            table4.AddRow(new string[] {
                        "SomeDataToStore",
                        "Testing"});
#line 33
 testRunner.And("I have a SomethingElseHappenedEvent to be added to the store with the following v" +
                    "alues", ((string)(null)), table4);
#line 39
 testRunner.And("that event will serialize to \'The Second Record\'");
#line 40
 testRunner.When("I add the domain events to the store");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "EventDate",
                        "Data",
                        "Sequence",
                        "AggregateRootId",
                        "EventType"});
            table5.AddRow(new string[] {
                        "3/20/2010 3:01:04 AM",
                        "The First Record",
                        "2",
                        "8312E92C-DF1C-4970-A9D5-6414120C3CF7",
                        "SimpleCqrs.EventStore.SqlServer.Tests.SomethingHappenedEvent, SimpleCqrs.EventSto" +
                            "re.SqlServer.Tests"});
            table5.AddRow(new string[] {
                        "4/24/2010 3:01:04 AM",
                        "The Second Record",
                        "4",
                        "C3579C12-C29B-4F65-8D83-B79AC5C85718",
                        "SimpleCqrs.EventStore.SqlServer.Tests.SomethingElseHappenedEvent, SimpleCqrs.Even" +
                            "tStore.SqlServer.Tests"});
#line 41
 testRunner.Then("I should have the following events in the database", ((string)(null)), table5);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Inserting and retrieving an event")]
        public virtual void InsertingAndRetrievingAnEvent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Inserting and retrieving an event", ((string[])(null)));
#line 46
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table6.AddRow(new string[] {
                        "EventDate",
                        "3/20/2010 3:01:04 AM"});
            table6.AddRow(new string[] {
                        "AggregateRootId",
                        "8312E92C-DF1C-4970-A9D5-6414120C3CF7"});
            table6.AddRow(new string[] {
                        "Sequence",
                        "2"});
            table6.AddRow(new string[] {
                        "ThisHappened",
                        "something"});
#line 47
 testRunner.Given("I have a SomethingHappenedEvent to be added to the store with the following value" +
                    "s", ((string)(null)), table6);
#line 53
 testRunner.And("I am choosing to use the Json Serializer");
#line 54
 testRunner.When("I add the domain events to the store");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "EventDate",
                        "AggregateRootId",
                        "Sequence",
                        "ThisHappened"});
            table7.AddRow(new string[] {
                        "3/20/2010 3:01:04 AM",
                        "8312E92C-DF1C-4970-A9D5-6414120C3CF7",
                        "2",
                        "something"});
#line 55
 testRunner.Then("I should get back the following SomethingHappenedEvents", ((string)(null)), table7);
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
