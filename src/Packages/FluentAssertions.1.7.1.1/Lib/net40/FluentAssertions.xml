<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FluentAssertions</name>
    </assembly>
    <members>
        <member name="M:FluentAssertions.AndConstraint`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="T:FluentAssertions.AssertionExtensions">
            <summary>
            Contains extension methods for custom assertions in unit tests.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.Invoking``1(``0,System.Action{``0})">
            <summary>
            Invokes the specified action on an subject so that you can chain it with any of the ShouldThrow or ShouldNotThrow 
            overloads.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.ExecutionTimeOf``1(``0,System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Provides methods for asserting the execution time of a method or property.
            </summary>
            <param name="subject">The object that exposes the method or property.</param>
            <param name="action">A reference to the method or property to measure the execution time of.</param>
            <returns>
            Returns an object for asserting that the execution time matches certain conditions.
            </returns>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.ExecutionTime(System.Action)">
            <summary>
            Provides methods for asserting the execution time of a method or property.
            </summary>
            <param name="action">A reference to the method or property to measure the execution time of.</param>
            <returns>
            Returns an object for asserting that the execution time matches certain conditions.
            </returns>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.Should(System.Xml.Linq.XDocument)">
            <summary>
            Returns an <see cref="T:FluentAssertions.Assertions.XDocumentAssertions"/> object that can be used to assert the
            current <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.Should(System.Xml.Linq.XElement)">
            <summary>
            Returns an <see cref="T:FluentAssertions.Assertions.XElementAssertions"/> object that can be used to assert the
            current <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.Should(System.Xml.Linq.XAttribute)">
            <summary>
            Returns an <see cref="T:FluentAssertions.Assertions.XAttributeAssertions"/> object that can be used to assert the
            current <see cref="T:System.Xml.Linq.XAttribute"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.ShouldThrow``1(System.Action)">
            <summary>
            Asserts that the <paramref name="action"/> throws an exception.
            </summary>
            <typeparam name="TException">
            The type of the exception it should throw.
            </typeparam>
            <returns>
            Returns an object that allows asserting additional members of the thrown exception.
            </returns>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.ShouldThrow``1(System.Action,System.String,System.Object[])">
            <summary>
            Asserts that the <paramref name="action"/> throws an exception.
            </summary>
            <param name="action">A reference to the method or property.</param>
            <typeparam name="TException">
            The type of the exception it should throw.
            </typeparam>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonArgs">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
            <returns>
            Returns an object that allows asserting additional members of the thrown exception.
            </returns>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.ShouldNotThrow``1(System.Action)">
            <summary>
            Asserts that the <paramref name="action"/> does not throw a particular exception.
            </summary>
            <typeparam name="TException">
            The type of the exception it should not throw. Any other exceptions are ignored and will satisfy the assertion.
            </typeparam>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.ShouldNotThrow``1(System.Action,System.String,System.Object[])">
            <summary>
            Asserts that the <paramref name="action"/> does not throw a particular exception.
            </summary>
            <param name="action">The current method or property.</param>
            <typeparam name="TException">
            The type of the exception it should not throw. Any other exceptions are ignored and will satisfy the assertion.
            </typeparam>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonArgs">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.ShouldNotThrow(System.Action)">
            <summary>
            Asserts that the <paramref name="action"/> does not throw any exception at all.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.ShouldNotThrow(System.Action,System.String,System.Object[])">
            <summary>
            Asserts that the <paramref name="action"/> does not throw any exception at all.
            </summary>
            <param name="action">The current method or property.</param>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonArgs">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.Enumerating(System.Func{System.Collections.IEnumerable})">
            <summary>
            Forces enumerating a collection. Should be used to assert that a method that uses the 
            <c>yield</c> keyword throws a particular exception.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.Enumerating``1(System.Func{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Forces enumerating a collection. Should be used to assert that a method that uses the 
            <c>yield</c> keyword throws a particular exception.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.Should(System.Object)">
            <summary>
            Returns an <see cref="T:FluentAssertions.Assertions.ObjectAssertions"/> object that can be used to assert the
            current <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.Should(System.Boolean)">
            <summary>
            Returns an <see cref="T:FluentAssertions.Assertions.BooleanAssertions"/> object that can be used to assert the
            current <see cref="T:System.Boolean"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.Should(System.Nullable{System.Boolean})">
            <summary>
            Returns an <see cref="T:FluentAssertions.Assertions.NullableBooleanAssertions"/> object that can be used to assert the
            current nullable <see cref="T:System.Boolean"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.Should(System.Guid)">
            <summary>
            Returns an <see cref="T:FluentAssertions.Assertions.GuidAssertions"/> object that can be used to assert the
            current <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.Should(System.Nullable{System.Guid})">
            <summary>
            Returns an <see cref="T:FluentAssertions.Assertions.NullableGuidAssertions"/> object that can be used to assert the
            current nullable <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.Should(System.Collections.IEnumerable)">
            <summary>
            Returns an <see cref="T:FluentAssertions.Assertions.NonGenericCollectionAssertions"/> object that can be used to assert the
            current <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.Should``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns an <see cref="T:FluentAssertions.Assertions.GenericCollectionAssertions`1"/> object that can be used to assert the
            current <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.Should``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Returns an <see cref="T:FluentAssertions.Assertions.GenericDictionaryAssertions`2"/> object that can be used to assert the
            current <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.Should(System.DateTime)">
            <summary>
            Returns an <see cref="T:FluentAssertions.Assertions.DateTimeAssertions"/> object that can be used to assert the
            current <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.Should(System.Nullable{System.DateTime})">
            <summary>
            Returns an <see cref="T:FluentAssertions.Assertions.NullableDateTimeAssertions"/> object that can be used to assert the
            current nullable <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.Should``1(System.IComparable{``0})">
            <summary>
            Returns an <see cref="T:FluentAssertions.Assertions.ComparableTypeAssertions`1"/> object that can be used to assert the
            current <see cref="T:System.IComparable`1"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.Should(System.Int32)">
            <summary>
            Returns an <see cref="T:FluentAssertions.Assertions.IntegralAssertions`1"/> object that can be used to assert the
            current <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.Should(System.Nullable{System.Int32})">
            <summary>
            Returns an <see cref="T:FluentAssertions.Assertions.IntegralAssertions`1"/> object that can be used to assert the
            current nullable <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.Should(System.Byte)">
            <summary>
            Returns an <see cref="T:FluentAssertions.Assertions.IntegralAssertions`1"/> object that can be used to assert the
            current <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.Should(System.Nullable{System.Byte})">
            <summary>
            Returns an <see cref="T:FluentAssertions.Assertions.IntegralAssertions`1"/> object that can be used to assert the
            current nullable <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.Should(System.Int16)">
            <summary>
            Returns an <see cref="T:FluentAssertions.Assertions.IntegralAssertions`1"/> object that can be used to assert the
            current <see cref="T:System.Int16"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.Should(System.Nullable{System.Int16})">
            <summary>
            Returns an <see cref="T:FluentAssertions.Assertions.IntegralAssertions`1"/> object that can be used to assert the
            current nullable <see cref="T:System.Int16"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.Should(System.Int64)">
            <summary>
            Returns an <see cref="T:FluentAssertions.Assertions.IntegralAssertions`1"/> object that can be used to assert the
            current <see cref="T:System.Int64"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.Should(System.Nullable{System.Int64})">
            <summary>
            Returns an <see cref="T:FluentAssertions.Assertions.IntegralAssertions`1"/> object that can be used to assert the
            current nullable <see cref="T:System.Int64"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.Should(System.Single)">
            <summary>
            Returns an <see cref="T:FluentAssertions.Assertions.NumericAssertions`1"/> object that can be used to assert the
            current <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.Should(System.Nullable{System.Single})">
            <summary>
            Returns an <see cref="T:FluentAssertions.Assertions.NumericAssertions`1"/> object that can be used to assert the
            current nullable <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.Should(System.Double)">
            <summary>
            Returns an <see cref="T:FluentAssertions.Assertions.NumericAssertions`1"/> object that can be used to assert the
            current <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.Should(System.Nullable{System.Double})">
            <summary>
            Returns an <see cref="T:FluentAssertions.Assertions.NumericAssertions`1"/> object that can be used to assert the
            current nullable <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.Should(System.String)">
            <summary>
            Returns an <see cref="T:FluentAssertions.Assertions.StringAssertions"/> object that can be used to assert the
            current <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.Should(System.TimeSpan)">
            <summary>
            Returns an <see cref="T:FluentAssertions.Assertions.SimpleTimeSpanAssertions"/> object that can be used to assert the
            current <see cref="T:System.TimeSpan"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.Should(System.Nullable{System.TimeSpan})">
            <summary>
            Returns an <see cref="T:FluentAssertions.Assertions.NullableSimpleTimeSpanAssertions"/> object that can be used to assert the
            current nullable <see cref="T:System.TimeSpan"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.ShouldHave``1(``0)">
            <summary>
            Asserts that the properties of an object matches those of another object.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.Should(System.Type)">
            <summary>
            Returns a <see cref="T:FluentAssertions.Assertions.TypeAssertions"/> object that can be used to assert the
            current <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.Should(FluentAssertions.Assertions.MethodInfoSelector)">
            <summary>
            Returns a <see cref="T:FluentAssertions.Assertions.MethodInfoAssertions"/> object that can be used to assert the methods returned by the
            current <see cref="T:FluentAssertions.Assertions.MethodInfoSelector"/>.
            </summary>
            <seealso cref="T:FluentAssertions.Assertions.TypeAssertions"/>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.Should(FluentAssertions.Assertions.PropertyInfoSelector)">
            <summary>
            Returns a <see cref="T:FluentAssertions.Assertions.PropertyInfoAssertions"/> object that can be used to assert the properties returned by the
            current <see cref="T:FluentAssertions.Assertions.PropertyInfoSelector"/>.
            </summary>
            <seealso cref="T:FluentAssertions.Assertions.TypeAssertions"/>
        </member>
        <member name="M:FluentAssertions.AssertionExtensions.As``1(System.Object)">
            <summary>
            Safely casts the specified object to the type specified through <typeparamref name="TTo"/>.
            </summary>
            <remarks>
            Has been introduced to allow casting objects without breaking the fluent API.
            </remarks>
            <typeparam name="TTo"></typeparam>
        </member>
        <member name="T:FluentAssertions.Assertions.ActionAssertions">
            <summary>
            Contains a number of methods to assert that an <see cref="T:System.Action"/> yields the expected result.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.ActionAssertions.ShouldThrow``1(System.String,System.Object[])">
            <summary>
            Asserts that the current <see cref="T:System.Action"/> throws an exception of type <typeparamref name="TException"/>.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.ActionAssertions.ShouldNotThrow``1(System.String,System.Object[])">
            <summary>
            Asserts that the current <see cref="T:System.Action"/> does not throw an exception of type <typeparamref name="TException"/>.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.ActionAssertions.ShouldNotThrow(System.String,System.Object[])">
            <summary>
            Asserts that the current <see cref="T:System.Action"/> does not throw any exception.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="P:FluentAssertions.Assertions.ActionAssertions.Subject">
            <summary>
            Gets the <see cref="T:System.Action"/> that is being asserted.
            </summary>
        </member>
        <member name="T:FluentAssertions.Assertions.BooleanAssertions">
            <summary>
            Contains a number of methods to assert that a <see cref="T:System.Boolean"/> is in the expected state.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.BooleanAssertions.BeFalse">
            <summary>
            Asserts that the value is <c>false</c>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.BooleanAssertions.BeFalse(System.String,System.Object[])">
            <summary>
            Asserts that the value is <c>false</c>.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.BooleanAssertions.BeTrue">
            <summary>
            Asserts that the value is <c>true</c>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.BooleanAssertions.BeTrue(System.String,System.Object[])">
            <summary>
            Asserts that the value is <c>true</c>.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.BooleanAssertions.Be(System.Boolean)">
            <summary>
            Asserts that the value is equal to the specified <paramref name="expected"/> value.
            </summary>
            <param name="expected">The expected value</param>
        </member>
        <member name="M:FluentAssertions.Assertions.BooleanAssertions.Be(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that the value is equal to the specified <paramref name="expected"/> value.
            </summary>
            <param name="expected">The expected value</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="P:FluentAssertions.Assertions.BooleanAssertions.Subject">
            <summary>
            Gets the object which value is being asserted.
            </summary>
        </member>
        <member name="T:FluentAssertions.Assertions.CollectionAssertions`2">
            <summary>
            Contains a number of methods to assert that an <see cref="T:System.Collections.IEnumerable"/> is in the expected state.
            </summary>
        </member>
        <member name="T:FluentAssertions.Assertions.ReferenceTypeAssertions`2">
            <summary>
            Contains a number of methods to assert that a reference type object is in the expected state.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.ReferenceTypeAssertions`2.BeOfType``1">
            <summary>
            Asserts that the object is of the specified type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The expected type of the object.</typeparam>
        </member>
        <member name="M:FluentAssertions.Assertions.ReferenceTypeAssertions`2.BeOfType``1(System.String,System.Object[])">
            <summary>
            Asserts that the object is of the specified type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The expected type of the object.</typeparam>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.ReferenceTypeAssertions`2.BeAssignableTo``1">
            <summary>
            Asserts that the object is assignable to a variable of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to which the object should be assignable.</typeparam>
            <returns>An <see cref="T:FluentAssertions.AndConstraint`1"/> which can be used to chain assertions.</returns>
        </member>
        <member name="M:FluentAssertions.Assertions.ReferenceTypeAssertions`2.BeAssignableTo``1(System.String,System.Object[])">
            <summary>
            Asserts that the object is assignable to a variable of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to which the object should be assignable.</typeparam>
            <param name="reason">The reason why the object should be assignable to the type.</param>
            <param name="reasonArgs">The parameters used when formatting the <paramref name="reason"/>.</param>
            <returns>An <see cref="T:FluentAssertions.AndConstraint`1"/> which can be used to chain assertions.</returns>
        </member>
        <member name="M:FluentAssertions.Assertions.ReferenceTypeAssertions`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Asserts that the <paramref name="predicate"/> is statisfied.
            </summary>
            <param name="predicate">The predicate which must be satisfied by the <typeparamref name="TSubject"/>.</param>
            <returns>An <see cref="T:FluentAssertions.AndConstraint`1"/> which can be used to chain assertions.</returns>
        </member>
        <member name="M:FluentAssertions.Assertions.ReferenceTypeAssertions`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Object[])">
            <summary>
            Asserts that the <paramref name="predicate"/> is satisfied.
            </summary>
            <param name="predicate">The predicate which must be statisfied by the <typeparamref name="TSubject"/>.</param>
            <param name="reason">The reason why the predicate should be satisfied.</param>
            <param name="reasonArgs">The parameters used when formatting the <paramref name="reason"/>.</param>
            <returns>An <see cref="T:FluentAssertions.AndConstraint`1"/> which can be used to chain assertions.</returns>
        </member>
        <member name="M:FluentAssertions.Assertions.ReferenceTypeAssertions`2.Match``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Asserts that the <paramref name="predicate"/> is satisfied.
            </summary>
            <param name="predicate">The predicate which must be statisfied by the <typeparamref name="TSubject"/>.</param>
            <returns>An <see cref="T:FluentAssertions.AndConstraint`1"/> which can be used to chain assertions.</returns>
        </member>
        <member name="M:FluentAssertions.Assertions.ReferenceTypeAssertions`2.Match``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Object[])">
            <summary>
            Asserts that the <paramref name="predicate"/> is satisfied.
            </summary>
            <param name="predicate">The predicate which must be statisfied by the <typeparamref name="TSubject"/>.</param>
            <param name="reason">The reason why the predicate should be satisfied.</param>
            <param name="reasonArgs">The parameters used when formatting the <paramref name="reason"/>.</param>
            <returns>An <see cref="T:FluentAssertions.AndConstraint`1"/> which can be used to chain assertions.</returns>
        </member>
        <member name="P:FluentAssertions.Assertions.ReferenceTypeAssertions`2.Subject">
            <summary>
            Gets the object which value is being asserted.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.HaveCount(System.Int32)">
            <summary>
            Asserts that the number of items in the collection matches the supplied <paramref name="expected" /> amount.
            </summary>
            <param name="expected">The expected number of items in the collection.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.HaveCount(System.Int32,System.String,System.Object[])">
            <summary>
            Asserts that the number of items in the collection matches the supplied <paramref name="expected"/> amount.
            </summary>
            <param name="expected">The expected number of items in the collection.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.HaveCount(System.Linq.Expressions.Expression{System.Func{System.Int32,System.Boolean}})">
            <summary>
            Asserts that the number of items in the collection matches a condition stated by the <paramref name="countPredicate"/>.
            </summary>
            <param name="countPredicate">A predicate that yields the number of items that is expected to be in the collection.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.HaveCount(System.Linq.Expressions.Expression{System.Func{System.Int32,System.Boolean}},System.String,System.Object[])">
            <summary>
            Asserts that the number of items in the collection matches a condition stated by the <paramref name="countPredicate"/>.
            </summary>
            <param name="countPredicate">A predicate that yields the number of items that is expected to be in the collection.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.BeEmpty">
            <summary>
            Asserts that the collection does not contain any items.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.BeEmpty(System.String,System.Object[])">
            <summary>
            Asserts that the collection does not contain any items.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.NotBeEmpty">
            <summary>
            Asserts that the collection contains at least 1 item.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.NotBeEmpty(System.String,System.Object[])">
            <summary>
            Asserts that the collection contains at least 1 item.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.OnlyHaveUniqueItems">
            <summary>
            Asserts that the collection does not contain any duplicate items.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.OnlyHaveUniqueItems(System.String,System.Object[])">
            <summary>
            Asserts that the collection does not contain any duplicate items.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.NotContainNulls">
            <summary>
            Asserts that the collection does not contain any <c>null</c> items.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.NotContainNulls(System.String,System.Object[])">
            <summary>
            Asserts that the collection does not contain any <c>null</c> items.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.Equal(System.Collections.IEnumerable)">
            <summary>
            Expects the current collection to contain all the same elements in the same order as the collection identified by 
            <paramref name="expected"/>. Elements are compared using their <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="expected">An <see cref="T:System.Collections.IEnumerable"/> with the expected items.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.Equal(System.Object[])">
            <summary>
            Expects the current collection to contain all the same elements in the same order as the collection identified by 
            <paramref name="elements"/>. Elements are compared using their <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="elements">A params array with the expected elements.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.Equal(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Expects the current collection to contain all the same elements in the same order as the collection identified by 
            <paramref name="expected"/>. Elements are compared using their <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="expected">An <see cref="T:System.Collections.IEnumerable"/> with the expected elements.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.NotEqual(System.Collections.IEnumerable)">
            <summary>
            Expects the current collection not to contain all the same elements in the same order as the collection identified by 
            <paramref name="unexpected"/>. Elements are compared using their <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="unexpected">An <see cref="T:System.Collections.IEnumerable"/> with the elements that are not expected.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.NotEqual(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Expects the current collection not to contain all the same elements in the same order as the collection identified by 
            <paramref name="unexpected"/>. Elements are compared using their <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="unexpected">An <see cref="T:System.Collections.IEnumerable"/> with the elements that are not expected.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.BeEquivalentTo(System.Collections.IEnumerable)">
            <summary>
            Expects the current collection to contain all elements of the collection identified by <paramref name="expected"/>,
            regardless of the order. Elements are compared using their <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="expected">An <see cref="T:System.Collections.IEnumerable"/> with the expected elements.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.BeEquivalentTo(System.Object[])">
            <summary>
            Expects the current collection to contain all elements of the collection identified by <paramref name="elements"/>,
            regardless of the order. Elements are compared using their <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="elements">A params array with the expected elements.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.BeEquivalentTo(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Expects the current collection to contain all elements of the collection identified by <paramref name="expected"/>,
            regardless of the order. Elements are compared using their <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="expected">An <see cref="T:System.Collections.IEnumerable"/> with the expected elements.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.NotBeEquivalentTo(System.Collections.IEnumerable)">
            <summary>
            Expects the current collection not to contain all elements of the collection identified by <paramref name="unexpected"/>,
            regardless of the order. Elements are compared using their <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="unexpected">An <see cref="T:System.Collections.IEnumerable"/> with the unexpected elements.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.NotBeEquivalentTo(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Expects the current collection not to contain all elements of the collection identified by <paramref name="unexpected"/>,
            regardless of the order. Elements are compared using their <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="unexpected">An <see cref="T:System.Collections.IEnumerable"/> with the unexpected elements.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.ContainItemsAssignableTo``1(System.String,System.Object[])">
            <summary>
            Asserts that the current collection only contains items that are assignable to the type <typeparamref name="T"/>.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.Contain(System.Collections.IEnumerable)">
            <summary>
            Expects the current collection to contain the specified elements in any order. Elements are compared
            using their <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="expected">An <see cref="T:System.Collections.IEnumerable"/> with the expected elements.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.Contain(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Expects the current collection to contain the specified elements in any order. Elements are compared
            using their <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="expected">An <see cref="T:System.Collections.IEnumerable"/> with the expected elements.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.ContainInOrder(System.Collections.IEnumerable)">
            <summary>
            Expects the current collection to contain the specified elements in the exact same order. Elements are compared
            using their <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="expected">An <see cref="T:System.Collections.IEnumerable"/> with the expected elements.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.ContainInOrder(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Expects the current collection to contain the specified elements in the exact same order. Elements are compared
            using their <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="expected">An <see cref="T:System.Collections.IEnumerable"/> with the expected elements.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.BeSubsetOf(System.Collections.IEnumerable)">
            <summary>
            Asserts that the collection is a subset of the <paramref name="expectedSuperset"/>.
            </summary>
            <param name="expectedSuperset">An <see cref="T:System.Collections.IEnumerable"/> with the expected superset.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.BeSubsetOf(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Asserts that the collection is a subset of the <paramref name="expectedSuperset"/>.
            </summary>
            <param name="expectedSuperset">An <see cref="T:System.Collections.IEnumerable"/> with the expected superset.</param>
            <param name="reason">        
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.NotBeSubsetOf(System.Collections.IEnumerable)">
            <summary>
            Asserts that the collection is not a subset of the <paramref name="unexpectedSuperset"/>.
            </summary>
            <param name="unexpectedSuperset">An <see cref="T:System.Collections.IEnumerable"/> with the unexpected superset.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.NotBeSubsetOf(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Asserts that the collection is not a subset of the <paramref name="unexpectedSuperset"/>.
            </summary>
            <param name="unexpectedSuperset">An <see cref="T:System.Collections.IEnumerable"/> with the unexpected superset.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.HaveSameCount(System.Collections.IEnumerable)">
            <summary>
            Assert that the current collection has the same number of elements as <paramref name="otherCollection" />.
            </summary>
            <param name="otherCollection">The other collection with the same expected number of elements</param>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.HaveSameCount(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Assert that the current collection has the same number of elements as <paramref name="otherCollection"/>.
            </summary>
            <param name="otherCollection">The other collection with the same expected number of elements</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.BeNull">
            <summary>
            Asserts that the current collection has not been initialized yet with an actual collection.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.BeNull(System.String,System.Object[])">
            <summary>
            Asserts that the current collection has not been initialized yet with an actual collection.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.NotBeNull">
            <summary>
            Asserts that the current collection has been initialized with an actual collection.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.NotBeNull(System.String,System.Object[])">
            <summary>
            Asserts that the current collection has been initialized with an actual collection.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.HaveElementAt(System.Int32,System.Object)">
            <summary>
            Asserts that the current collection has the supplied <paramref name="element" /> at the
            supplied <paramref name="index" />.
            </summary>
            <param name="index">The index where the element is expected</param>
            <param name="element">The expected element</param>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.HaveElementAt(System.Int32,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that the current collection has the supplied <paramref name="element"/> at the 
            supplied <paramref name="index"/>.
            </summary>
            <param name="index">The index where the element is expected</param>
            <param name="element">The expected element</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.ContainItemsAssignableTo``1">
            <summary>
            Asserts that the current collection only contains items that are assignable to the type <typeparamref name="T" />.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.NotContain(System.Object)">
            <summary>
            Asserts that the current collection does not contain the supplied <paramref name="unexpected" /> item.
            </summary>
            <param name="unexpected">The element that is not expected to be in the collection</param>
        </member>
        <member name="M:FluentAssertions.Assertions.CollectionAssertions`2.NotContain(System.Object,System.String,System.Object[])">
            <summary>
            Asserts that the current collection does not contain the supplied <paramref name="unexpected"/> item.
            </summary>
            <param name="unexpected">The element that is not expected to be in the collection</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="T:FluentAssertions.Assertions.ComparableTypeAssertions`1">
            <summary>
            Contains a number of methods to assert that an <see cref="T:System.IComparable`1"/> is in the expected state.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.ComparableTypeAssertions`1.Be(`0)">
            <summary>
            Asserts that the subject is considered equal to another object according to the implementation of <see cref="T:System.IComparable`1"/>.
            </summary>
            <param name="expected">
            The object to pass to the subject's <see cref="M:System.IComparable`1.CompareTo(`0)"/> method.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.ComparableTypeAssertions`1.Be(`0,System.String,System.Object[])">
            <summary>
            Asserts that the subject is considered equal to another object according to the implementation of <see cref="T:System.IComparable`1"/>.
            </summary>
            <param name="expected">
            The object to pass to the subject's <see cref="M:System.IComparable`1.CompareTo(`0)"/> method.
            </param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.ComparableTypeAssertions`1.NotBe(`0)">
            <summary>
            Asserts that the subject is not equal to another object according to its implementation of <see cref="T:System.IComparable`1"/>.
            </summary>
            <param name="expected">
            The object to pass to the subject's <see cref="M:System.IComparable`1.CompareTo(`0)"/> method.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.ComparableTypeAssertions`1.NotBe(`0,System.String,System.Object[])">
            <summary>
            Asserts that the subject is not equal to another object according to its implementation of <see cref="T:System.IComparable`1"/>.
            </summary>
            <param name="expected">
            The object to pass to the subject's <see cref="M:System.IComparable`1.CompareTo(`0)"/> method.
            </param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.ComparableTypeAssertions`1.BeLessThan(`0)">
            <summary>
            Asserts that the subject is less than another object according to its implementation of <see cref="T:System.IComparable`1"/>.
            </summary>
            <param name="expected">
            The object to pass to the subject's <see cref="M:System.IComparable`1.CompareTo(`0)"/> method.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.ComparableTypeAssertions`1.BeLessThan(`0,System.String,System.Object[])">
            <summary>
            Asserts that the subject is less than another object according to its implementation of <see cref="T:System.IComparable`1"/>.
            </summary>
            <param name="expected">
            The object to pass to the subject's <see cref="M:System.IComparable`1.CompareTo(`0)"/> method.
            </param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.ComparableTypeAssertions`1.BeLessOrEqualTo(`0)">
            <summary>
            Asserts that the subject is less than or equal to another object according to its implementation of <see cref="T:System.IComparable`1"/>.
            </summary>
            <param name="expected">
            The object to pass to the subject's <see cref="M:System.IComparable`1.CompareTo(`0)"/> method.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.ComparableTypeAssertions`1.BeLessOrEqualTo(`0,System.String,System.Object[])">
            <summary>
            Asserts that the subject is less than or equal to another object according to its implementation of <see cref="T:System.IComparable`1"/>.
            </summary>
            <param name="expected">
            The object to pass to the subject's <see cref="M:System.IComparable`1.CompareTo(`0)"/> method.
            </param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.ComparableTypeAssertions`1.BeGreaterThan(`0)">
            <summary>
            Asserts that the subject is greater than another object according to its implementation of <see cref="T:System.IComparable`1"/>.
            </summary>
            <param name="expected">
            The object to pass to the subject's <see cref="M:System.IComparable`1.CompareTo(`0)"/> method.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.ComparableTypeAssertions`1.BeGreaterThan(`0,System.String,System.Object[])">
            <summary>
            Asserts that the subject is greater than another object according to its implementation of <see cref="T:System.IComparable`1"/>.
            </summary>
            <param name="expected">
            The object to pass to the subject's <see cref="M:System.IComparable`1.CompareTo(`0)"/> method.
            </param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.ComparableTypeAssertions`1.BeGreaterOrEqualTo(`0)">
            <summary>
            Asserts that the subject is greater than or equal to another object according to its implementation of <see cref="T:System.IComparable`1"/>.
            </summary>
            <param name="expected">
            The object to pass to the subject's <see cref="M:System.IComparable`1.CompareTo(`0)"/> method.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.ComparableTypeAssertions`1.BeGreaterOrEqualTo(`0,System.String,System.Object[])">
            <summary>
            Asserts that the subject is greater than or equal to another object according to its implementation of <see cref="T:System.IComparable`1"/>.
            </summary>
            <param name="expected">
            The object to pass to the subject's <see cref="M:System.IComparable`1.CompareTo(`0)"/> method.
            </param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.ComparableTypeAssertions`1.BeInRange(`0,`0)">
            <summary>
            Asserts that a value is within a range.
            </summary>
            <remarks>
            Where the range is continuous or incremental depends on the actual type of the value. 
            </remarks>
            <param name="minimumValue">
            The minimum valid value of the range.
            </param>
            <param name="maximumValue">
            The maximum valid value of the range.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.ComparableTypeAssertions`1.BeInRange(`0,`0,System.String,System.Object[])">
            <summary>
            Asserts that a value is within a range.
            </summary>
            <remarks>
            Where the range is continuous or incremental depends on the actual type of the value. 
            </remarks>
            <param name="minimumValue">
            The minimum valid value of the range.
            </param>
            <param name="maximumValue">
            The maximum valid value of the range.
            </param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.ComparableTypeAssertions`1.NotBeNull">
            <summary>
            Asserts that a nullable numeric value is not <c>null</c>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.ComparableTypeAssertions`1.NotBeNull(System.String,System.Object[])">
            <summary>
            Asserts that a nullable numeric value is not <c>null</c>.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>      
        </member>
        <member name="M:FluentAssertions.Assertions.ComparableTypeAssertions`1.BeNull">
            <summary>
            Asserts that a nullable numeric value is <c>null</c>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.ComparableTypeAssertions`1.BeNull(System.String,System.Object[])">
            <summary>
            Asserts that a nullable numeric value is <c>null</c>.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>  
        </member>
        <member name="P:FluentAssertions.Assertions.ComparableTypeAssertions`1.Subject">
            <summary>
            Gets the object which value is being asserted.
            </summary>
        </member>
        <member name="T:FluentAssertions.Assertions.ComparisonMode">
            <summary>
            Defines the way <see cref="M:FluentAssertions.Assertions.ExceptionAssertions`1.WithMessage(System.String)"/> compares the expected exception 
            message with the actual one.
            </summary>
        </member>
        <member name="F:FluentAssertions.Assertions.ComparisonMode.Exact">
            <summary>
            The message must match exactly, including the casing of the characters.
            </summary>
        </member>
        <member name="F:FluentAssertions.Assertions.ComparisonMode.Equivalent">
            <summary>
            The message must match except for the casing of the characters.
            </summary>
        </member>
        <member name="F:FluentAssertions.Assertions.ComparisonMode.StartWith">
            <summary>
            The message must start with the exact text, including the casing of the characters..
            </summary>
        </member>
        <member name="F:FluentAssertions.Assertions.ComparisonMode.StartWithEquivalent">
            <summary>
            The message must start with the text except for the casing of the characters.
            </summary>
        </member>
        <member name="F:FluentAssertions.Assertions.ComparisonMode.Substring">
            <summary>
            The message must contain the exact text.
            </summary>
        </member>
        <member name="F:FluentAssertions.Assertions.ComparisonMode.EquivalentSubstring">
            <summary>
            The message must contain the text except for the casing of the characters.
            </summary>
        </member>
        <member name="F:FluentAssertions.Assertions.ComparisonMode.Wildcard">
            <summary>
            The message must match a wildcard pattern consisting of ordinary characters as well as * and ?.
            </summary>
        </member>
        <member name="T:FluentAssertions.Assertions.CyclicReferenceHandling">
            <summary>
            Indication of how cyclic references should be handled when validating equality of nested properties.
            </summary>
        </member>
        <member name="F:FluentAssertions.Assertions.CyclicReferenceHandling.Ignore">
            <summary>
            Cyclic references will be ignored.
            </summary>
        </member>
        <member name="F:FluentAssertions.Assertions.CyclicReferenceHandling.ThrowException">
            <summary>
            Cyclic references will result in an exception.
            </summary>
        </member>
        <member name="T:FluentAssertions.Assertions.DateTimeAssertions">
            <summary>
            Contains a number of methods to assert that a <see cref="T:System.DateTime"/> is in the expected state.
            </summary>
            <remarks>
            You can use the <see cref="T:FluentAssertions.Common.FluentDateTimeExtensions"/> for a more fluent way of specifying a <see cref="T:System.DateTime"/>.
            </remarks>
        </member>
        <member name="M:FluentAssertions.Assertions.DateTimeAssertions.Be(System.DateTime)">
            <summary>
            Asserts that the current <see cref="T:System.DateTime"/> is exactly equal to the <paramref name="expected"/> value.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.DateTimeAssertions.Be(System.DateTime,System.String,System.Object[])">
            <summary>
            Asserts that the current <see cref="T:System.DateTime"/> is exactly equal to the <paramref name="expected"/> value.
            </summary>
            <param name="expected">The expected value</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.DateTimeAssertions.NotBe(System.DateTime)">
            <summary>
            Asserts that the current <see cref="T:System.DateTime"/> is not equal to the <paramref name="unexpected"/> value.
            </summary>
            <param name="unexpected">The unexpected value</param>
        </member>
        <member name="M:FluentAssertions.Assertions.DateTimeAssertions.NotBe(System.DateTime,System.String,System.Object[])">
            <summary>
            Asserts that the current <see cref="T:System.DateTime"/> is not equal to the <paramref name="unexpected"/> value.
            </summary>
            <param name="unexpected">The unexpected value</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.DateTimeAssertions.BeBefore(System.DateTime)">
            <summary>
            Asserts that the current <see cref="T:System.DateTime"/> is before the specified value.
            </summary>
            <param name="expected">The <see cref="T:System.DateTime"/> that the current value is expected to be before.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.DateTimeAssertions.BeBefore(System.DateTime,System.String,System.Object[])">
            <summary>
            Asserts that the current <see cref="T:System.DateTime"/> is before the specified value.
            </summary>
            <param name="expected">The <see cref="T:System.DateTime"/> that the current value is expected to be before.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.DateTimeAssertions.BeOnOrBefore(System.DateTime)">
            <summary>
            Asserts that the current <see cref="T:System.DateTime"/> is either on, or before the specified value.
            </summary>
            <param name="expected">The <see cref="T:System.DateTime"/> that the current value is expected to be on or before.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.DateTimeAssertions.BeOnOrBefore(System.DateTime,System.String,System.Object[])">
            <summary>
            Asserts that the current <see cref="T:System.DateTime"/> is either on, or before the specified value.
            </summary>
            <param name="expected">The <see cref="T:System.DateTime"/> that the current value is expected to be on or before.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.DateTimeAssertions.BeAfter(System.DateTime)">
            <summary>
            Asserts that the current <see cref="T:System.DateTime"/> is after the specified value.
            </summary>
            <param name="expected">The <see cref="T:System.DateTime"/> that the current value is expected to be after.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.DateTimeAssertions.BeAfter(System.DateTime,System.String,System.Object[])">
            <summary>
            Asserts that the current <see cref="T:System.DateTime"/> is after the specified value.
            </summary>
            <param name="expected">The <see cref="T:System.DateTime"/> that the current value is expected to be after.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.DateTimeAssertions.BeOnOrAfter(System.DateTime)">
            <summary>
            Asserts that the current <see cref="T:System.DateTime"/> is either on, or after the specified value.
            </summary>
            <param name="expected">The <see cref="T:System.DateTime"/> that the current value is expected to be on or after.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.DateTimeAssertions.BeOnOrAfter(System.DateTime,System.String,System.Object[])">
            <summary>
            Asserts that the current <see cref="T:System.DateTime"/> is either on, or after the specified value.
            </summary>
            <param name="expected">The <see cref="T:System.DateTime"/> that the current value is expected to be on or after.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.DateTimeAssertions.HaveYear(System.Int32)">
            <summary>
            Asserts that the current <see cref="T:System.DateTime"/> has the <paramref name="expected"/> year.
            </summary>
            <param name="expected">The expected year of the current value.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.DateTimeAssertions.HaveYear(System.Int32,System.String,System.Object[])">
            <summary>
            Asserts that the current <see cref="T:System.DateTime"/> has the <paramref name="expected"/> year.
            </summary>
            <param name="expected">The expected year of the current value.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.DateTimeAssertions.HaveMonth(System.Int32)">
            <summary>
            Asserts that the current <see cref="T:System.DateTime"/> has the <paramref name="expected"/> month.
            </summary>
            <param name="expected">The expected month of the current value.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.DateTimeAssertions.HaveMonth(System.Int32,System.String,System.Object[])">
            <summary>
            Asserts that the current <see cref="T:System.DateTime"/> has the <paramref name="expected"/> month.
            </summary>
            <param name="expected">The expected month of the current value.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.DateTimeAssertions.HaveDay(System.Int32)">
            <summary>
            Asserts that the current <see cref="T:System.DateTime"/> has the <paramref name="expected"/> day.
            </summary>
            <param name="expected">The expected day of the current value.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.DateTimeAssertions.HaveDay(System.Int32,System.String,System.Object[])">
            <summary>
            Asserts that the current <see cref="T:System.DateTime"/> has the <paramref name="expected"/> day.
            </summary>
            <param name="expected">The expected day of the current value.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.DateTimeAssertions.HaveHour(System.Int32)">
            <summary>
            Asserts that the current <see cref="T:System.DateTime"/> has the <paramref name="expected"/> hour.
            </summary>
            <param name="expected">The expected hour of the current value.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.DateTimeAssertions.HaveHour(System.Int32,System.String,System.Object[])">
            <summary>
            Asserts that the current <see cref="T:System.DateTime"/> has the <paramref name="expected"/> hour.
            </summary>
            <param name="expected">The expected hour of the current value.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.DateTimeAssertions.HaveMinute(System.Int32)">
            <summary>
            Asserts that the current <see cref="T:System.DateTime"/> has the <paramref name="expected"/> minute.
            </summary>
            <param name="expected">The expected minutes of the current value.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.DateTimeAssertions.HaveMinute(System.Int32,System.String,System.Object[])">
            <summary>
            Asserts that the current <see cref="T:System.DateTime"/> has the <paramref name="expected"/> minute.
            </summary>
            <param name="expected">The expected minutes of the current value.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.DateTimeAssertions.HaveSecond(System.Int32)">
            <summary>
            Asserts that the current <see cref="T:System.DateTime"/> has the <paramref name="expected"/> second.
            </summary>
            <param name="expected">The expected seconds of the current value.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.DateTimeAssertions.HaveSecond(System.Int32,System.String,System.Object[])">
            <summary>
            Asserts that the current <see cref="T:System.DateTime"/> has the <paramref name="expected"/> second.
            </summary>
            <param name="expected">The expected seconds of the current value.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.DateTimeAssertions.BeMoreThan(System.TimeSpan)">
            <summary>
            Returns a <see cref="T:FluentAssertions.Assertions.TimeSpanAssertions"/> object that can be used to assert that the current <see cref="T:System.DateTime"/>
            exceeds the specified <paramref name="timeSpan"/> compared to another <see cref="T:System.DateTime"/>.
            </summary>
            <param name="timeSpan">
            The amount of time that the current <see cref="T:System.DateTime"/> should exceed compared to another <see cref="T:System.DateTime"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.DateTimeAssertions.BeAtLeast(System.TimeSpan)">
            <summary>
            Returns a <see cref="T:FluentAssertions.Assertions.TimeSpanAssertions"/> object that can be used to assert that the current <see cref="T:System.DateTime"/>
            is equal to or exceeds the specified <paramref name="timeSpan"/> compared to another <see cref="T:System.DateTime"/>.
            </summary>
            <param name="timeSpan">
            The amount of time that the current <see cref="T:System.DateTime"/> should be equal or exceed compared to
            another <see cref="T:System.DateTime"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.DateTimeAssertions.BeExactly(System.TimeSpan)">
            <summary>
            Returns a <see cref="T:FluentAssertions.Assertions.TimeSpanAssertions"/> object that can be used to assert that the current <see cref="T:System.DateTime"/>
            differs exactly the specified <paramref name="timeSpan"/> compared to another <see cref="T:System.DateTime"/>.
            </summary>
            <param name="timeSpan">
            The amount of time that the current <see cref="T:System.DateTime"/> should differ exactly compared to another <see cref="T:System.DateTime"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.DateTimeAssertions.BeWithin(System.TimeSpan)">
            <summary>
            Returns a <see cref="T:FluentAssertions.Assertions.TimeSpanAssertions"/> object that can be used to assert that the current <see cref="T:System.DateTime"/>
            is within the specified <paramref name="timeSpan"/> compared to another <see cref="T:System.DateTime"/>.
            </summary>
            <param name="timeSpan">
            The amount of time that the current <see cref="T:System.DateTime"/> should be within another <see cref="T:System.DateTime"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.DateTimeAssertions.BeLessThan(System.TimeSpan)">
            <summary>
            Returns a <see cref="T:FluentAssertions.Assertions.TimeSpanAssertions"/> object that can be used to assert that the current <see cref="T:System.DateTime"/>
            differs at maximum the specified <paramref name="timeSpan"/> compared to another <see cref="T:System.DateTime"/>.
            </summary>
            <param name="timeSpan">
            The maximum amount of time that the current <see cref="T:System.DateTime"/> should differ compared to another <see cref="T:System.DateTime"/>.
            </param>
        </member>
        <member name="P:FluentAssertions.Assertions.DateTimeAssertions.Subject">
            <summary>
            Gets the object which value is being asserted.
            </summary>
        </member>
        <member name="T:FluentAssertions.Assertions.ExceptionAssertions`1">
            <summary>
              Contains a number of methods to assert that an <see cref="T:System.Exception"/> is in the correct state.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.ExceptionAssertions`1.WithMessage(System.String)">
            <summary>
              Asserts that the thrown exception has a message that exactly matches  the <paramref name = "expectedMessage" />
            </summary>
            <param name = "expectedMessage">
              The expected message of the exception.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.ExceptionAssertions`1.WithMessage(System.String,System.String,System.Object[])">
            <summary>
              Asserts that the thrown exception has a message that matches <paramref name="expectedMessage"/>
              depending on the specified matching mode.
            </summary>
            <param name="expectedMessage">
              The expected message of the exception.
            </param>
            <param name="reason">
              A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
              is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
              Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.ExceptionAssertions`1.WithMessage(System.String,FluentAssertions.Assertions.ComparisonMode)">
            <summary>
              Asserts that the thrown exception has a message that matches <paramref name = "expectedMessage" />
              depending on the specified matching mode.
            </summary>
            <param name = "expectedMessage">
              The expected message of the exception.
            </param>
            <param name = "comparisonMode">
              Determines how the expected message is compared with the actual message.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.ExceptionAssertions`1.WithMessage(System.String,FluentAssertions.Assertions.ComparisonMode,System.String,System.Object[])">
            <summary>
              Asserts that the thrown exception has a message that matches <paramref name="expectedMessage"/>
              depending on the specified matching mode.
            </summary>
            <param name="expectedMessage">
              The expected message of the exception.
            </param>
            <param name="comparisonMode">
              Determines how the expected message is compared with the actual message.
            </param>
            <param name="reason">
              A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
              is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
              Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.ExceptionAssertions`1.WithInnerException``1">
            <summary>
              Asserts that the thrown exception contains an inner exception of type <typeparamref name = "TInnerException" />.
            </summary>
            <typeparam name = "TInnerException">The expected type of the inner exception.</typeparam>
        </member>
        <member name="M:FluentAssertions.Assertions.ExceptionAssertions`1.WithInnerException``1(System.String,System.Object[])">
            <summary>
              Asserts that the thrown exception contains an inner exception of type <typeparamref name = "TInnerException" />.
            </summary>
            <typeparam name = "TInnerException">The expected type of the inner exception.</typeparam>
            <param name = "reason">The reason why the inner exception should be of the supplied type.</param>
            <param name = "reasonArgs">The parameters used when formatting the <paramref name = "reason" />.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.ExceptionAssertions`1.WithInnerMessage(System.String)">
            <summary>
              Asserts that the thrown exception contains an inner exception with the <paramref name = "expectedInnerMessage" />.
            </summary>
            <param name = "expectedInnerMessage">The expected message of the inner exception.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.ExceptionAssertions`1.WithInnerMessage(System.String,FluentAssertions.Assertions.ComparisonMode)">
            <summary>
              Asserts that the thrown exception contains an inner exception with the <paramref name = "expectedInnerMessage" />.
            </summary>
            <param name = "expectedInnerMessage">The expected message of the inner exception.</param>
            <param name = "comparisonMode">Determines how the expected message is compared with the actual message.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.ExceptionAssertions`1.WithInnerMessage(System.String,System.String,System.Object[])">
            <summary>
              Asserts that the thrown exception contains an inner exception with the <paramref name = "expectedInnerMessage" />.
            </summary>
            <param name = "expectedInnerMessage">The expected message of the inner exception.</param>
            <param name = "reason">
              The reason why the message of the inner exception should match <paramref name = "expectedInnerMessage" />.
            </param>
            <param name = "reasonArgs">The parameters used when formatting the <paramref name = "reason" />.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.ExceptionAssertions`1.WithInnerMessage(System.String,FluentAssertions.Assertions.ComparisonMode,System.String,System.Object[])">
            <summary>
              Asserts that the thrown exception contains an inner exception with the <paramref name = "expectedInnerMessage" />.
            </summary>
            <param name = "expectedInnerMessage">The expected message of the inner exception.</param>
            <param name = "comparisonMode">Determines how the expected message is compared with the actual message.</param>
            <param name = "reason">
              The reason why the message of the inner exception should match <paramref name = "expectedInnerMessage" />.
            </param>
            <param name = "reasonArgs">The parameters used when formatting the <paramref name = "reason" />.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.ExceptionAssertions`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
              Asserts that the exception matches a particular condition.
            </summary>
            <param name = "exceptionExpression">
              The condition that the exception must match.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.ExceptionAssertions`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Object[])">
            <summary>
              Asserts that the exception matches a particular condition.
            </summary>
            <param name="exceptionExpression">
              The condition that the exception must match.
            </param>
            <param name="reason">
              A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
              start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonArgs">
              Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="P:FluentAssertions.Assertions.ExceptionAssertions`1.And">
            <summary>
              Gets the exception object of the exception thrown.
            </summary>
        </member>
        <member name="T:FluentAssertions.Assertions.ExecutionTimeAssertions">
            <summary>
            Provides methods for asserting that the execution time of an <see cref="T:System.Action"/> satifies certain conditions.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.ExecutionTimeAssertions.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentAssertions.Assertions.ExecutionTimeAssertions"/> class.
            </summary>
            <param name="action">The action of which the execution time must be asserted.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.ExecutionTimeAssertions.ShouldNotExceed(System.TimeSpan)">
            <summary>
            Asserts that the execution time of the operation does not exceed a specified amount of time.
            </summary>
            <param name="maxDuration">
            The maximum allowed duration.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.ExecutionTimeAssertions.ShouldNotExceed(System.TimeSpan,System.String,System.Object[])">
            <summary>
            Asserts that the execution time of the operation does not exceed a specified amount of time.
            </summary>
            <param name="maxDuration">
            The maximum allowed duration.
            </param>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonArgs">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="T:FluentAssertions.Assertions.MemberExecutionTimeAssertions`1">
            <summary>
            Provides methods for asserting that the execution time of an object member satifies certain conditions.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:FluentAssertions.Assertions.MemberExecutionTimeAssertions`1.#ctor(`0,System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:FluentAssertions.Assertions.MemberExecutionTimeAssertions`1"/> class.
            </summary>
            <param name="subject">The object that exposes the method or property.</param>
            <param name="action">A reference to the method or property to measure the execution time of.</param>
        </member>
        <member name="T:FluentAssertions.Assertions.FloatingPointExtensions">
            <summary>
            Contains a number of extension methods for floating point <see cref="T:FluentAssertions.Assertions.NumericAssertions`1"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.FloatingPointExtensions.BeApproximately(FluentAssertions.Assertions.NumericAssertions{System.Nullable{System.Single}},System.Single,System.Single)">
            <summary>
            Asserts a floating point value approximates another value as close as possible.
            </summary>
            <param name="parent">The <see cref="T:FluentAssertions.Assertions.NumericAssertions`1"/> object that is being extended.</param>
            <param name="expectedValue">
            The expected value to compare the actual value with.
            </param>
            <param name="precision">
            The maximum amount of which the two values may differ.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.FloatingPointExtensions.BeApproximately(FluentAssertions.Assertions.NumericAssertions{System.Nullable{System.Single}},System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Asserts a floating point value approximates another value as close as possible.
            </summary>
            <param name="parent">The <see cref="T:FluentAssertions.Assertions.NumericAssertions`1"/> object that is being extended.</param>
            <param name="expectedValue">
            The expected value to compare the actual value with.
            </param>
            <param name="precision">
            The maximum amount of which the two values may differ.
            </param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.FloatingPointExtensions.BeApproximately(FluentAssertions.Assertions.NumericAssertions{System.Single},System.Single,System.Single)">
            <summary>
            Asserts a floating point value approximates another value as close as possible.
            </summary>
            <param name="parent">The <see cref="T:FluentAssertions.Assertions.NumericAssertions`1"/> object that is being extended.</param>
            <param name="expectedValue">
            The expected value to compare the actual value with.
            </param>
            <param name="precision">
            The maximum amount of which the two values may differ.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.FloatingPointExtensions.BeApproximately(FluentAssertions.Assertions.NumericAssertions{System.Single},System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Asserts a floating point value approximates another value as close as possible.
            </summary>
            <param name="parent">The <see cref="T:FluentAssertions.Assertions.NumericAssertions`1"/> object that is being extended.</param>
            <param name="expectedValue">
            The expected value to compare the actual value with.
            </param>
            <param name="precision">
            The maximum amount of which the two values may differ.
            </param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.FloatingPointExtensions.BeApproximately(FluentAssertions.Assertions.NumericAssertions{System.Nullable{System.Double}},System.Double,System.Double)">
            <summary>
            Asserts a floating point value approximates another value as close as possible.
            </summary>
            <param name="parent">The <see cref="T:FluentAssertions.Assertions.NumericAssertions`1"/> object that is being extended.</param>
            <param name="expectedValue">
            The expected value to compare the actual value with.
            </param>
            <param name="precision">
            The maximum amount of which the two values may differ.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.FloatingPointExtensions.BeApproximately(FluentAssertions.Assertions.NumericAssertions{System.Nullable{System.Double}},System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Asserts a floating point value approximates another value as close as possible.
            </summary>
            <param name="parent">The <see cref="T:FluentAssertions.Assertions.NumericAssertions`1"/> object that is being extended.</param>
            <param name="expectedValue">
            The expected value to compare the actual value with.
            </param>
            <param name="precision">
            The maximum amount of which the two values may differ.
            </param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.FloatingPointExtensions.BeApproximately(FluentAssertions.Assertions.NumericAssertions{System.Double},System.Double,System.Double)">
            <summary>
            Asserts a floating point value approximates another value as close as possible.
            </summary>
            <param name="parent">The <see cref="T:FluentAssertions.Assertions.NumericAssertions`1"/> object that is being extended.</param>
            <param name="expectedValue">
            The expected value to compare the actual value with.
            </param>
            <param name="precision">
            The maximum amount of which the two values may differ.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.FloatingPointExtensions.BeApproximately(FluentAssertions.Assertions.NumericAssertions{System.Double},System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Asserts a floating point value approximates another value as close as possible.
            </summary>
            <param name="parent">The <see cref="T:FluentAssertions.Assertions.NumericAssertions`1"/> object that is being extended.</param>
            <param name="expectedValue">
            The expected value to compare the actual value with.
            </param>
            <param name="precision">
            The maximum amount of which the two values may differ.
            </param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="T:FluentAssertions.Assertions.GenericCollectionAssertions`1">
            <summary>
            Contains a number of methods to assert that an <see cref="T:System.Collections.Generic.IEnumerable`1"/> is in the expected state.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericCollectionAssertions`1.Contain(`0)">
            <summary>
            Asserts that the collection contains the specified item.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericCollectionAssertions`1.Contain(`0,System.String,System.Object[])">
            <summary>
            Asserts that the collection contains the specified item.
            </summary>
            <param name="expected">The expected item.</param>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonArgs">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericCollectionAssertions`1.Contain(System.Collections.Generic.IEnumerable{`0},`0[])">
            <summary>
            Asserts that the collection contains some extra items in addition to the original items.
            </summary>
            <param name="expectedItemsList">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of expected items.</param>
            <param name="additionalExpectedItems">Additional items that are expected to be contained by the collection.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericCollectionAssertions`1.Contain(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Asserts that the collection contains at least one item that matches the predicate.
            </summary>
            <param name="predicate">A predicate to match the items in the collection against.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericCollectionAssertions`1.Contain(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Object[])">
            <summary>
            Asserts that the collection contains at least one item that matches the predicate.
            </summary>
            <param name="predicate">A predicate to match the items in the collection against.</param>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonArgs">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericCollectionAssertions`1.OnlyContain(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Asserts that the collection only contains items that match a predicate.
            </summary>
            <param name="predicate">A predicate to match the items in the collection against.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericCollectionAssertions`1.OnlyContain(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Object[])">
            <summary>
            Asserts that the collection only contains items that match a predicate.
            </summary>
            <param name="predicate">A predicate to match the items in the collection against.</param>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonArgs">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericCollectionAssertions`1.NotContain(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Asserts that the collection does not contain any items that match the predicate.
            </summary>
            <param name="predicate">A predicate to match the items in the collection against.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericCollectionAssertions`1.NotContain(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Object[])">
            <summary>
            Asserts that the collection does not contain any items that match the predicate.
            </summary>
            <param name="predicate">A predicate to match the items in the collection against.</param>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonArgs">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="T:FluentAssertions.Assertions.GenericDictionaryAssertions`2">
            <summary>
            Contains a number of methods to assert that an <see cref="T:System.Collections.Generic.IDictionary`2"/> is in the expected state.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericDictionaryAssertions`2.BeNull">
            <summary>
            Asserts that the current dictionary has not been initialized yet with an actual dictionary.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericDictionaryAssertions`2.BeNull(System.String,System.Object[])">
            <summary>
            Asserts that the current dictionary has not been initialized yet with an actual dictionary.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericDictionaryAssertions`2.NotBeNull">
            <summary>
            Asserts that the current dictionary has been initialized with an actual dictionary.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericDictionaryAssertions`2.NotBeNull(System.String,System.Object[])">
            <summary>
            Asserts that the current dictionary has been initialized with an actual dictionary.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericDictionaryAssertions`2.HaveCount(System.Int32)">
            <summary>
            Asserts that the number of items in the dictionary matches the supplied <paramref name="expected" /> amount.
            </summary>
            <param name="expected">The expected number of items.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericDictionaryAssertions`2.HaveCount(System.Int32,System.String,System.Object[])">
            <summary>
            Asserts that the number of items in the dictionary matches the supplied <paramref name="expected"/> amount.
            </summary>
            <param name="expected">The expected number of items.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericDictionaryAssertions`2.HaveCount(System.Linq.Expressions.Expression{System.Func{System.Int32,System.Boolean}})">
            <summary>
            Asserts that the number of items in the dictionary matches a condition stated by a predicate.
            </summary>
            <param name="countPredicate">The predicate which must be statisfied by the amount of items.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericDictionaryAssertions`2.HaveCount(System.Linq.Expressions.Expression{System.Func{System.Int32,System.Boolean}},System.String,System.Object[])">
            <summary>
            Asserts that the number of items in the dictionary matches a condition stated by a predicate.
            </summary>
            <param name="countPredicate">The predicate which must be statisfied by the amount of items.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericDictionaryAssertions`2.BeEmpty">
            <summary>
            Asserts that the dictionary does not contain any items.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericDictionaryAssertions`2.BeEmpty(System.String,System.Object[])">
            <summary>
            Asserts that the dictionary does not contain any items.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericDictionaryAssertions`2.NotBeEmpty">
            <summary>
            Asserts that the dictionary contains at least 1 item.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericDictionaryAssertions`2.NotBeEmpty(System.String,System.Object[])">
            <summary>
            Asserts that the dictionary contains at least 1 item.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericDictionaryAssertions`2.Equal(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Asserts that the current dictionary contains all the same key-value pairs as the
            specified <paramref name="expected"/> dictionary. Keys and values are compared using
            their <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="expected">The expected dictionary</param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericDictionaryAssertions`2.Equal(System.Collections.Generic.IDictionary{`0,`1},System.String,System.Object[])">
            <summary>
            Asserts that the current dictionary contains all the same key-value pairs as the
            specified <paramref name="expected"/> dictionary. Keys and values are compared using
            their <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="expected">The expected dictionary</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericDictionaryAssertions`2.NotEqual(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Asserts the current dictionary not to contain all the same key-value pairs as the
            specified <paramref name="unexpected"/> dictionary. Keys and values are compared using
            their <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="unexpected">The unexpected dictionary</param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericDictionaryAssertions`2.NotEqual(System.Collections.Generic.IDictionary{`0,`1},System.String,System.Object[])">
            <summary>
            Asserts the current dictionary not to contain all the same key-value pairs as the
            specified <paramref name="unexpected"/> dictionary. Keys and values are compared using
            their <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="unexpected">The unexpected dictionary</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericDictionaryAssertions`2.ContainKey(`0)">
            <summary>
            Asserts that the dictionary contains the specified key. Keys are compared using
            their <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="expected">The expected key</param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericDictionaryAssertions`2.ContainKey(`0,System.String,System.Object[])">
            <summary>
            Asserts that the dictionary contains the specified key. Keys are compared using
            their <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="expected">The expected key</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericDictionaryAssertions`2.ContainKeys(`0[])">
            <summary>
            Asserts that the dictionary contains all of the specified keys. Keys are compared using
            their <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="expected">The expected keys</param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericDictionaryAssertions`2.ContainKeys(System.Collections.Generic.IEnumerable{`0},System.String,System.Object[])">
            <summary>
            Asserts that the dictionary contains all of the specified keys. Keys are compared using
            their <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="expected">The expected keys</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericDictionaryAssertions`2.NotContainKey(`0)">
            <summary>
            Asserts that the current dictionary does not contain the specified <paramref name="unexpected"/> key.
            Keys are compared using their <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="unexpected">The unexpected key</param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericDictionaryAssertions`2.NotContainKey(`0,System.String,System.Object[])">
            <summary>
            Asserts that the current dictionary does not contain the specified <paramref name="unexpected"/> key.
            Keys are compared using their <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="unexpected">The unexpected key</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericDictionaryAssertions`2.ContainValue(`1)">
            <summary>
            Asserts that the dictionary contains the specified value. Values are compared using
            their <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="expected">The expected value</param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericDictionaryAssertions`2.ContainValue(`1,System.String,System.Object[])">
            <summary>
            Asserts that the dictionary contains the specified value. Values are compared using
            their <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="expected">The expected value</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericDictionaryAssertions`2.ContainValues(`1[])">
            <summary>
            Asserts that the dictionary contains all of the specified values. Values are compared using
            their <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="expected">The expected values</param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericDictionaryAssertions`2.ContainValues(System.Collections.Generic.IEnumerable{`1},System.String,System.Object[])">
            <summary>
            Asserts that the dictionary contains all of the specified values. Values are compared using
            their <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="expected">The expected values</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericDictionaryAssertions`2.NotContainValue(`1)">
            <summary>
            Asserts that the current dictionary does not contain the specified <paramref name="unexpected"/> value.
            Values are compared using their <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="unexpected">The unexpected value</param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericDictionaryAssertions`2.NotContainValue(`1,System.String,System.Object[])">
            <summary>
            Asserts that the current dictionary does not contain the specified <paramref name="unexpected"/> value.
            Values are compared using their <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="unexpected">The unexpected value</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericDictionaryAssertions`2.Contain(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Asserts that the current dictionary contains the specified <paramref name="expected"/>.
            Keys and values are compared using their <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="expected">The expected <see cref="T:System.Collections.Generic.KeyValuePair`2"/></param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericDictionaryAssertions`2.Contain(System.Collections.Generic.KeyValuePair{`0,`1},System.String,System.Object[])">
            <summary>
            Asserts that the current dictionary contains the specified <paramref name="expected"/>.
            Keys and values are compared using their <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="expected">The expected <see cref="T:System.Collections.Generic.KeyValuePair`2"/></param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericDictionaryAssertions`2.Contain(`0,`1)">
            <summary>
            Asserts that the current dictionary contains the specified <paramref name="value"/> for the supplied <paramref name="key"/>. Values are compared using their <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="key">The key for which to validate the value</param>
            <param name="value">The value to validate</param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericDictionaryAssertions`2.Contain(`0,`1,System.String,System.Object[])">
            <summary>
            Asserts that the current dictionary contains the specified <paramref name="value"/> for the supplied <paramref name="key"/>. Values are compared using their <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="key">The key for which to validate the value</param>
            <param name="value">The value to validate</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericDictionaryAssertions`2.NotContain(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Asserts that the current dictionary does not contain the specified <paramref name="item"/>.
            Keys and values are compared using their <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="item">The unexpected <see cref="T:System.Collections.Generic.KeyValuePair`2"/></param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericDictionaryAssertions`2.NotContain(System.Collections.Generic.KeyValuePair{`0,`1},System.String,System.Object[])">
            <summary>
            Asserts that the current dictionary does not contain the specified <paramref name="item"/>.
            Keys and values are compared using their <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="item">The unexpected <see cref="T:System.Collections.Generic.KeyValuePair`2"/></param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericDictionaryAssertions`2.NotContain(`0,`1)">
            <summary>
            Asserts that the current dictionary does not contain the specified <paramref name="value"/> for the
            supplied <paramref name="key"/>. Values are compared using their <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="key">The key for which to validate the value</param>
            <param name="value">The value to validate</param>
        </member>
        <member name="M:FluentAssertions.Assertions.GenericDictionaryAssertions`2.NotContain(`0,`1,System.String,System.Object[])">
            <summary>
            Asserts that the current dictionary does not contain the specified <paramref name="value"/> for the
            supplied <paramref name="key"/>. Values are compared using their <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="key">The key for which to validate the value</param>
            <param name="value">The value to validate</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="P:FluentAssertions.Assertions.GenericDictionaryAssertions`2.Subject">
            <summary>
            Gets the object which value is being asserted.
            </summary>
        </member>
        <member name="T:FluentAssertions.Assertions.GuidAssertions">
            <summary>
            Contains a number of methods to assert that a <see cref="T:System.Guid"/> is in the correct state.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.GuidAssertions.BeEmpty">
            <summary>
            Asserts that the <see cref="T:System.Guid"/> is <see cref="F:System.Guid.Empty"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.GuidAssertions.BeEmpty(System.String,System.Object[])">
            <summary>
            Asserts that the <see cref="T:System.Guid"/> is <see cref="F:System.Guid.Empty"/>.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.GuidAssertions.NotBeEmpty">
            <summary>
            Asserts that the <see cref="T:System.Guid"/> is not <see cref="F:System.Guid.Empty"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.GuidAssertions.NotBeEmpty(System.String,System.Object[])">
            <summary>
            Asserts that the <see cref="T:System.Guid"/> is not <see cref="F:System.Guid.Empty"/>.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.GuidAssertions.Be(System.Guid)">
            <summary>
            Asserts that the <see cref="T:System.Guid"/> is equal to the <paramref name="expected"/> GUID.
            </summary>
            <param name="expected">The expected value to compare the actual value with.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.GuidAssertions.Be(System.String)">
            <summary>
            Asserts that the <see cref="T:System.Guid"/> is equal to the <paramref name="expected"/> GUID.
            </summary>
            <param name="expected">The expected <see cref="T:System.String"/> value to compare the actual value with.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.GuidAssertions.Be(System.String,System.String,System.Object[])">
            <summary>
            Asserts that the <see cref="T:System.Guid"/> is equal to the <paramref name="expected"/> GUID.
            </summary>
            <param name="expected">The expected <see cref="T:System.String"/> value to compare the actual value with.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.GuidAssertions.Be(System.Guid,System.String,System.Object[])">
            <summary>
            Asserts that the <see cref="T:System.Guid"/> is equal to the <paramref name="expected"/> GUID.
            </summary>
            <param name="expected">The expected value to compare the actual value with.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.GuidAssertions.NotBe(System.Guid)">
            <summary>
            Asserts that the <see cref="T:System.Guid"/> is not equal to the <paramref name="unexpected"/> GUID.
            </summary>
            <param name="unexpected">The unexpected value to compare the actual value with.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.GuidAssertions.NotBe(System.Guid,System.String,System.Object[])">
            <summary>
            Asserts that the <see cref="T:System.Guid"/> is not equal to the <paramref name="unexpected"/> GUID.
            </summary>
            <param name="unexpected">The unexpected value to compare the actual value with.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="P:FluentAssertions.Assertions.GuidAssertions.Subject">
            <summary>
            Gets the object which value is being asserted.
            </summary>
        </member>
        <member name="T:FluentAssertions.Assertions.IntegralAssertions`1">
            <summary>
            Contains a number of methods to assert that an integral number is in the correct state.
            </summary>
        </member>
        <member name="T:FluentAssertions.Assertions.NumericAssertions`1">
            <summary>
            Contains a number of methods to assert that an <see cref="T:System.IComparable"/> is in the expected state.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.NumericAssertions`1.BePositive">
            <summary>
            Asserts that the numeric value is greater than or equal to zero.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.NumericAssertions`1.BePositive(System.String,System.Object[])">
            <summary>
            Asserts that the numeric value is greater than or equal to zero.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.NumericAssertions`1.BeNegative">
            <summary>
            Asserts that the numeric value is less than zero.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.NumericAssertions`1.BeNegative(System.String,System.Object[])">
            <summary>
            Asserts that the numeric value is less than zero.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.NumericAssertions`1.BeLessThan(`0)">
            <summary>
            Asserts that the numeric value is less than the specified <paramref name="expected"/> value.
            </summary>
            <param name="expected">The value to compare the current numeric value with.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.NumericAssertions`1.BeLessThan(`0,System.String,System.Object[])">
            <summary>
            Asserts that the numeric value is less than the specified <paramref name="expected"/> value.
            </summary>
            <param name="expected">The value to compare the current numeric value with.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.NumericAssertions`1.BeLessOrEqualTo(`0)">
            <summary>
            Asserts that the numeric value is less than or equal to the specified <paramref name="expected"/> value.
            </summary>
            <param name="expected">The value to compare the current numeric value with.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.NumericAssertions`1.BeLessOrEqualTo(`0,System.String,System.Object[])">
            <summary>
            Asserts that the numeric value is less than or equal to the specified <paramref name="expected"/> value.
            </summary>
            <param name="expected">The value to compare the current numeric value with.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.NumericAssertions`1.BeGreaterThan(`0)">
            <summary>
            Asserts that the numeric value is greater than the specified <paramref name="expected"/> value.
            </summary>
            <param name="expected">The value to compare the current numeric value with.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.NumericAssertions`1.BeGreaterThan(`0,System.String,System.Object[])">
            <summary>
            Asserts that the numeric value is greater than the specified <paramref name="expected"/> value.
            </summary>
            <param name="expected">The value to compare the current numeric value with.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.NumericAssertions`1.BeGreaterOrEqualTo(`0)">
            <summary>
            Asserts that the numeric value is greater than or equal to the specified <paramref name="expected"/> value.
            </summary>
            <param name="expected">The value to compare the current numeric value with.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.NumericAssertions`1.BeGreaterOrEqualTo(`0,System.String,System.Object[])">
            <summary>
            Asserts that the numeric value is greater than or equal to the specified <paramref name="expected"/> value.
            </summary>
            <param name="expected">The value to compare the current numeric value with.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.NumericAssertions`1.BeInRange(`0,`0)">
            <summary>
            Asserts that a value is within a range.
            </summary>
            <remarks>
            Where the range is continuous or incremental depends on the actual type of the value. 
            </remarks>
            <param name="minimumValue">
            The minimum valid value of the range.
            </param>
            <param name="maximumValue">
            The maximum valid value of the range.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.NumericAssertions`1.BeInRange(`0,`0,System.String,System.Object[])">
            <summary>
            Asserts that a value is within a range.
            </summary>
            <remarks>
            Where the range is continuous or incremental depends on the actual type of the value. 
            </remarks>
            <param name="minimumValue">
            The minimum valid value of the range.
            </param>
            <param name="maximumValue">
            The maximum valid value of the range.
            </param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.IntegralAssertions`1.Be(`0)">
            <summary>
            Asserts that the integral number value is exactly the same as the <paramref name="expected"/> value.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.IntegralAssertions`1.Be(`0,System.String,System.Object[])">
            <summary>
            Asserts that the integral number value is exactly the same as the <paramref name="expected"/> value.
            </summary>
            <param name="expected">The expected value.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.IntegralAssertions`1.NotBe(`0)">
            <summary>
            Asserts that the integral number value is not the same as the <paramref name="unexpected"/> value.
            </summary>
            <param name="unexpected">The unexpected value.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.IntegralAssertions`1.NotBe(`0,System.String,System.Object[])">
            <summary>
            Asserts that the integral number value is not the same as the <paramref name="unexpected"/> value.
            </summary>
            <param name="unexpected">The unexpected value.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="T:FluentAssertions.Assertions.MethodInfoAssertions">
            <summary>
            Contains assertions for the <see cref="T:System.Reflection.MethodInfo"/> objects returned by the parent <see cref="T:FluentAssertions.Assertions.MethodInfoSelector"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.MethodInfoAssertions.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:FluentAssertions.Assertions.MethodInfoAssertions"/> class.
            </summary>
            <param name="methods">The methods.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.MethodInfoAssertions.BeVirtual">
            <summary>
            Asserts that the selected methods are virtual.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.MethodInfoAssertions.BeVirtual(System.String,System.Object[])">
            <summary>
            Asserts that the selected methods are virtual.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.MethodInfoAssertions.BeDecoratedWith``1">
            <summary>
            Asserts that the selected methods are decorated with the specified <typeparamref name="TAttribute"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.MethodInfoAssertions.BeDecoratedWith``1(System.String,System.Object[])">
            <summary>
            Asserts that the selected methods are decorated with the specified <typeparamref name="TAttribute"/>.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="P:FluentAssertions.Assertions.MethodInfoAssertions.SubjectMethods">
            <summary>
            Gets the object which value is being asserted.
            </summary>
        </member>
        <member name="T:FluentAssertions.Assertions.MethodInfoSelector">
            <summary>
            Allows for fluent selection of methods of a type through reflection.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.MethodInfoSelector.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentAssertions.Assertions.MethodInfoSelector"/> class.
            </summary>
            <param name="type">The type from which to select methods.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.MethodInfoSelector.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:FluentAssertions.Assertions.MethodInfoSelector"/> class.
            </summary>
            <param name="types">The types from which to select methods.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.MethodInfoSelector.ThatReturn``1">
            <summary>
            Only select the methods that return the specified type 
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.MethodInfoSelector.ThatAreDecoratedWith``1">
            <summary>
            Only select the methods that are decorated with an attribute of the specified type.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.MethodInfoSelector.ToArray">
            <summary>
            The resulting <see cref="T:System.Reflection.MethodInfo"/> objects.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.MethodInfoSelector.HasSpecialName(System.Reflection.MethodInfo)">
            <summary>
            Determines whether the specified method has a special name (like properties and events).
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.MethodInfoSelector.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:FluentAssertions.Assertions.MethodInfoSelector.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:FluentAssertions.Assertions.MethodInfoSelector.ThatArePublicOrInternal">
            <summary>
            Only select the methods that are public or internal.
            </summary>
        </member>
        <member name="P:FluentAssertions.Assertions.MethodInfoSelector.ThatReturnVoid">
            <summary>
            Only select the methods without a return value
            </summary>
        </member>
        <member name="T:FluentAssertions.Assertions.NonGenericCollectionAssertions">
            <summary>
            Contains a number of methods to assert that an <see cref="T:System.Collections.IEnumerable"/> is in the expected state.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.NonGenericCollectionAssertions.Contain(System.Object)">
            <summary>
            Asserts that the current collection contains the specified <paramref name="expected"/> object. Elements are compared
            using their <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="expected">An object, or <see cref="T:System.Collections.IEnumerable"/> of objects that are expected to be in the collection.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.NonGenericCollectionAssertions.Contain(System.Object,System.String,System.Object[])">
            <summary>
            Asserts that the current collection contains the specified <paramref name="expected"/> object. Elements are compared
            using their <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="expected">An object, or <see cref="T:System.Collections.IEnumerable"/> of objects that are expected to be in the collection.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="T:FluentAssertions.Assertions.NullableBooleanAssertions">
            <summary>
            Contains a number of methods to assert that a nullable <see cref="T:System.Boolean"/> is in the expected state.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.NullableBooleanAssertions.HaveValue">
            <summary>
            Asserts that a nullable boolean value is not <c>null</c>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.NullableBooleanAssertions.HaveValue(System.String,System.Object[])">
            <summary>
            Asserts that a nullable boolean value is not <c>null</c>.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>      
        </member>
        <member name="M:FluentAssertions.Assertions.NullableBooleanAssertions.NotHaveValue">
            <summary>
            Asserts that a nullable boolean value is <c>null</c>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.NullableBooleanAssertions.NotHaveValue(System.String,System.Object[])">
            <summary>
            Asserts that a nullable boolean value is <c>null</c>.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>      
        </member>
        <member name="M:FluentAssertions.Assertions.NullableBooleanAssertions.Be(System.Nullable{System.Boolean})">
            <summary>
            Asserts that the value is equal to the specified <paramref name="expected"/> value.
            </summary>
            <param name="expected">The expected value</param>
        </member>
        <member name="M:FluentAssertions.Assertions.NullableBooleanAssertions.Be(System.Nullable{System.Boolean},System.String,System.Object[])">
            <summary>
            Asserts that the value is equal to the specified <paramref name="expected"/> value.
            </summary>
            <param name="expected">The expected value</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="T:FluentAssertions.Assertions.NullableDateTimeAssertions">
            <summary>
            Contains a number of methods to assert that a nullable <see cref="T:System.DateTime"/> is in the expected state.
            </summary>
            <remarks>
            You can use the <see cref="T:FluentAssertions.Common.FluentDateTimeExtensions"/> for a more fluent way of specifying a <see cref="T:System.DateTime"/>.
            </remarks>
        </member>
        <member name="M:FluentAssertions.Assertions.NullableDateTimeAssertions.HaveValue">
            <summary>
            Asserts that a nullable <see cref="T:System.DateTime"/> value is not <c>null</c>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.NullableDateTimeAssertions.HaveValue(System.String,System.Object[])">
            <summary>
            Asserts that a nullable <see cref="T:System.DateTime"/> value is not <c>null</c>.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>      
        </member>
        <member name="M:FluentAssertions.Assertions.NullableDateTimeAssertions.NotHaveValue">
            <summary>
            Asserts that a nullable <see cref="T:System.DateTime"/> value is <c>null</c>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.NullableDateTimeAssertions.NotHaveValue(System.String,System.Object[])">
            <summary>
            Asserts that a nullable <see cref="T:System.DateTime"/> value is <c>null</c>.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>      
        </member>
        <member name="M:FluentAssertions.Assertions.NullableDateTimeAssertions.Be(System.Nullable{System.DateTime})">
            <summary>
            Asserts that the value is equal to the specified <paramref name="expected"/> value.
            </summary>
            <param name="expected">The expected value</param>
        </member>
        <member name="M:FluentAssertions.Assertions.NullableDateTimeAssertions.Be(System.Nullable{System.DateTime},System.String,System.Object[])">
            <summary>
            Asserts that the value is equal to the specified <paramref name="expected"/> value.
            </summary>
            <param name="expected">The expected value</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="T:FluentAssertions.Assertions.NullableGuidAssertions">
            <summary>
            Contains a number of methods to assert that a nullable <see cref="T:System.Guid"/> is in the expected state.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.NullableGuidAssertions.HaveValue">
            <summary>
            Asserts that a nullable <see cref="T:System.Guid"/> value is not <c>null</c>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.NullableGuidAssertions.HaveValue(System.String,System.Object[])">
            <summary>
            Asserts that a nullable <see cref="T:System.Guid"/> value is not <c>null</c>.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>      
        </member>
        <member name="M:FluentAssertions.Assertions.NullableGuidAssertions.NotHaveValue">
            <summary>
            Asserts that a nullable <see cref="T:System.Guid"/> value is <c>null</c>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.NullableGuidAssertions.NotHaveValue(System.String,System.Object[])">
            <summary>
            Asserts that a nullable <see cref="T:System.Guid"/> value is <c>null</c>.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>      
        </member>
        <member name="M:FluentAssertions.Assertions.NullableGuidAssertions.Be(System.Nullable{System.Guid})">
            <summary>
            Asserts that the value is equal to the specified <paramref name="expected"/> value.
            </summary>
            <param name="expected">The expected value</param>
        </member>
        <member name="M:FluentAssertions.Assertions.NullableGuidAssertions.Be(System.Nullable{System.Guid},System.String,System.Object[])">
            <summary>
            Asserts that the value is equal to the specified <paramref name="expected"/> value.
            </summary>
            <param name="expected">The expected value</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="T:FluentAssertions.Assertions.NullableNumericExtensions">
            <summary>
            Contains a number of methods to assert that a nullable numeric value has the expected value.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.NullableNumericExtensions.HaveValue``1(FluentAssertions.Assertions.NumericAssertions{System.Nullable{``0}})">
            <summary>
            Asserts that a nullable numeric value is not <c>null</c>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.NullableNumericExtensions.HaveValue``1(FluentAssertions.Assertions.NumericAssertions{System.Nullable{``0}},System.String,System.Object[])">
            <summary>
            Asserts that a nullable numeric value is not <c>null</c>.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>      
        </member>
        <member name="M:FluentAssertions.Assertions.NullableNumericExtensions.NotHaveValue``1(FluentAssertions.Assertions.NumericAssertions{System.Nullable{``0}})">
            <summary>
            Asserts that a nullable numeric value is <c>null</c>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.NullableNumericExtensions.NotHaveValue``1(FluentAssertions.Assertions.NumericAssertions{System.Nullable{``0}},System.String,System.Object[])">
            <summary>
            Asserts that a nullable numeric value is <c>null</c>.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>  
        </member>
        <member name="T:FluentAssertions.Assertions.NullableSimpleTimeSpanAssertions">
            <summary>
            Contains a number of methods to assert that a nullable <see cref="T:System.TimeSpan"/> is in the expected state.
            </summary>
            <remarks>
            You can use the <see cref="T:FluentAssertions.Common.TimeSpanConversionExtensions"/> for a more fluent way of specifying a <see cref="T:System.TimeSpan"/>.
            </remarks>
        </member>
        <member name="T:FluentAssertions.Assertions.SimpleTimeSpanAssertions">
            <summary>
            Contains a number of methods to assert that a nullable <see cref="T:System.TimeSpan"/> is in the expected state.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.SimpleTimeSpanAssertions.BePositive">
            <summary>
            Asserts that the time difference of the current <see cref="T:System.TimeSpan"/> is greater than zero.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.SimpleTimeSpanAssertions.BePositive(System.String,System.Object[])">
            <summary>
            Asserts that the time difference of the current <see cref="T:System.TimeSpan"/> is greater than zero.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.SimpleTimeSpanAssertions.BeNegative">
            <summary>
            Asserts that the time difference of the current <see cref="T:System.TimeSpan"/> is less than zero.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.SimpleTimeSpanAssertions.BeNegative(System.String,System.Object[])">
            <summary>
            Asserts that the time difference of the current <see cref="T:System.TimeSpan"/> is less than zero.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.SimpleTimeSpanAssertions.Be(System.TimeSpan)">
            <summary>
            Asserts that the time difference of the current <see cref="T:System.TimeSpan"/> is equal to the 
            specified <paramref name="expected"/> time.
            </summary>
            <param name="expected">The expected time difference</param>
        </member>
        <member name="M:FluentAssertions.Assertions.SimpleTimeSpanAssertions.Be(System.TimeSpan,System.String,System.Object[])">
            <summary>
            Asserts that the time difference of the current <see cref="T:System.TimeSpan"/> is equal to the 
            specified <paramref name="expected"/> time.
            </summary>
            <param name="expected">The expected time difference</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.SimpleTimeSpanAssertions.NotBe(System.TimeSpan)">
            <summary>
            Asserts that the time difference of the current <see cref="T:System.TimeSpan"/> is not equal to the 
            specified <paramref name="unexpected"/> time.
            </summary>
            <param name="unexpected">The unexpected time difference</param>
        </member>
        <member name="M:FluentAssertions.Assertions.SimpleTimeSpanAssertions.NotBe(System.TimeSpan,System.String,System.Object[])">
            <summary>
            Asserts that the time difference of the current <see cref="T:System.TimeSpan"/> is not equal to the 
            specified <paramref name="unexpected"/> time.
            </summary>
            <param name="unexpected">The unexpected time difference</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.SimpleTimeSpanAssertions.BeLessThan(System.TimeSpan)">
            <summary>
            Asserts that the time difference of the current <see cref="T:System.TimeSpan"/> is less than the 
            specified <paramref name="expected"/> time.
            </summary>
            <param name="expected">The time difference to which the current value will be compared</param>
        </member>
        <member name="M:FluentAssertions.Assertions.SimpleTimeSpanAssertions.BeLessThan(System.TimeSpan,System.String,System.Object[])">
            <summary>
            Asserts that the time difference of the current <see cref="T:System.TimeSpan"/> is less than the 
            specified <paramref name="expected"/> time.
            </summary>
            <param name="expected">The time difference to which the current value will be compared</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.SimpleTimeSpanAssertions.BeLessOrEqualTo(System.TimeSpan)">
            <summary>
            Asserts that the time difference of the current <see cref="T:System.TimeSpan"/> is less than or equal to the 
            specified <paramref name="expected"/> time.
            </summary>
            <param name="expected">The time difference to which the current value will be compared</param>
        </member>
        <member name="M:FluentAssertions.Assertions.SimpleTimeSpanAssertions.BeLessOrEqualTo(System.TimeSpan,System.String,System.Object[])">
            <summary>
            Asserts that the time difference of the current <see cref="T:System.TimeSpan"/> is less than or equal to the 
            specified <paramref name="expected"/> time.
            </summary>
            <param name="expected">The time difference to which the current value will be compared</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.SimpleTimeSpanAssertions.BeGreaterThan(System.TimeSpan)">
            <summary>
            Asserts that the time difference of the current <see cref="T:System.TimeSpan"/> is greater than the 
            specified <paramref name="expected"/> time.
            </summary>
            <param name="expected">The time difference to which the current value will be compared</param>
        </member>
        <member name="M:FluentAssertions.Assertions.SimpleTimeSpanAssertions.BeGreaterThan(System.TimeSpan,System.String,System.Object[])">
            <summary>
            Asserts that the time difference of the current <see cref="T:System.TimeSpan"/> is greater than the 
            specified <paramref name="expected"/> time.
            </summary>
            <param name="expected">The time difference to which the current value will be compared</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.SimpleTimeSpanAssertions.BeGreaterOrEqualTo(System.TimeSpan)">
            <summary>
            Asserts that the time difference of the current <see cref="T:System.TimeSpan"/> is greater than or equal to the 
            specified <paramref name="expected"/> time.
            </summary>
            <param name="expected">The time difference to which the current value will be compared</param>
        </member>
        <member name="M:FluentAssertions.Assertions.SimpleTimeSpanAssertions.BeGreaterOrEqualTo(System.TimeSpan,System.String,System.Object[])">
            <summary>
            Asserts that the time difference of the current <see cref="T:System.TimeSpan"/> is greater than or equal to the 
            specified <paramref name="expected"/> time.
            </summary>
            <param name="expected">The time difference to which the current value will be compared</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="P:FluentAssertions.Assertions.SimpleTimeSpanAssertions.Subject">
            <summary>
            Gets the object which value is being asserted.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.NullableSimpleTimeSpanAssertions.HaveValue">
            <summary>
            Asserts that a nullable <see cref="T:System.TimeSpan"/> value is not <c>null</c>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.NullableSimpleTimeSpanAssertions.HaveValue(System.String,System.Object[])">
            <summary>
            Asserts that a nullable <see cref="T:System.TimeSpan"/> value is not <c>null</c>.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>      
        </member>
        <member name="M:FluentAssertions.Assertions.NullableSimpleTimeSpanAssertions.NotHaveValue">
            <summary>
            Asserts that a nullable <see cref="T:System.TimeSpan"/> value is <c>null</c>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.NullableSimpleTimeSpanAssertions.NotHaveValue(System.String,System.Object[])">
            <summary>
            Asserts that a nullable <see cref="T:System.TimeSpan"/> value is <c>null</c>.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>      
        </member>
        <member name="T:FluentAssertions.Assertions.ObjectAssertions">
            <summary>
            Contains a number of methods to assert that an <see cref="T:System.Object"/> is in the expected state.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.ObjectAssertions.Be(System.Object)">
            <summary>
            Asserts that the value of an object equals another object when using it's <see cref="M:System.Object.Equals(System.Object)"/> method.
            </summary>
            <param name="expected">The expected value</param>
        </member>
        <member name="M:FluentAssertions.Assertions.ObjectAssertions.Be(System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object equals another object using its <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="expected">The expected value</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.ObjectAssertions.NotBe(System.Object)">
            <summary>
            Asserts that an object does not equal another object using it's <see cref="M:System.Object.Equals(System.Object)"/> method.
            </summary>
            <param name="unexpected">The unexpected value</param>
        </member>
        <member name="M:FluentAssertions.Assertions.ObjectAssertions.NotBe(System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object does not equal another object using it's <see cref="M:System.Object.Equals(System.Object)"/> method.
            </summary>
            <param name="unexpected">The unexpected value</param>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonArgs">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.ObjectAssertions.BeSameAs(System.Object)">
            <summary>
            Asserts that an object reference refers to the exact same object as another object reference.
            </summary>
            <param name="expected">The expected object</param>
        </member>
        <member name="M:FluentAssertions.Assertions.ObjectAssertions.BeSameAs(System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object reference refers to the exact same object as another object reference.
            </summary>
            <param name="expected">The expected object</param>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonArgs">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.ObjectAssertions.NotBeSameAs(System.Object)">
            <summary>
            Asserts that an object reference refers to a different object than another object reference refers to.
            </summary>
            <param name="unexpected">The unexpected object</param>
        </member>
        <member name="M:FluentAssertions.Assertions.ObjectAssertions.NotBeSameAs(System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object reference refers to a different object than another object reference refers to.
            </summary>
            <param name="unexpected">The unexpected object</param>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonArgs">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.ObjectAssertions.BeNull">
            <summary>
            Asserts that the object is <c>null</c>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.ObjectAssertions.BeNull(System.String,System.Object[])">
            <summary>
            Asserts that the object is <c>null</c>.
            </summary>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonArgs">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.ObjectAssertions.NotBeNull">
            <summary>
            Asserts that the object is not <c>null</c>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.ObjectAssertions.NotBeNull(System.String,System.Object[])">
            <summary>
            Asserts that the object is not <c>null</c>.
            </summary>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonArgs">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.ObjectAssertions.BeBinarySerializable">
            <summary>
            Asserts that an object can be serialized and deserialized using the binary serializer and that it stills retains
            the values of all properties.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.ObjectAssertions.BeBinarySerializable(System.String,System.Object[])">
            <summary>
            Asserts that an object can be serialized and deserialized using the binary serializer and that it stills retains
            the values of all properties.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.ObjectAssertions.BeXmlSerializable">
            <summary>
            Asserts that an object can be serialized and deserialized using the XML serializer and that it stills retains
            the values of all properties.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.ObjectAssertions.BeXmlSerializable(System.String,System.Object[])">
            <summary>
            Asserts that an object can be serialized and deserialized using the XML serializer and that it stills retains
            the values of all properties.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="T:FluentAssertions.Assertions.PropertyAssertions`1">
            <summary>
            Provides methods for selecting one or more properties of an object and comparing them with another object.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.PropertyAssertions`1.AllProperties">
            <summary>
            Includes all properties of <typeparamref name="T"/> when comparing the subject with another object using <see cref="M:FluentAssertions.Assertions.PropertyAssertions`1.EqualTo(System.Object)"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.PropertyAssertions`1.AllRuntimeProperties">
            <summary>
            Includes all properties of <typeparamref name="T"/> including those of the run-time type when comparing the subject 
            with another object using <see cref="M:FluentAssertions.Assertions.PropertyAssertions`1.EqualTo(System.Object)"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.PropertyAssertions`1.SharedProperties">
            <summary>
            Includes all properties of <typeparamref name="T"/> when comparing the subject with another object using <see cref="M:FluentAssertions.Assertions.PropertyAssertions`1.EqualTo(System.Object)"/>, 
            except those that the other object does not have.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.PropertyAssertions`1.IncludingNestedObjects(FluentAssertions.Assertions.CyclicReferenceHandling)">
            <summary>
            Perform recursive property comparison of the child properties for objects that are of incompatible type.
            </summary>
            <param name="ignore"> </param>
        </member>
        <member name="M:FluentAssertions.Assertions.PropertyAssertions`1.AllPropertiesBut(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Includes all properties of <typeparamref name="T"/> when comparing the subject with another object using <see cref="M:FluentAssertions.Assertions.PropertyAssertions`1.EqualTo(System.Object)"/>, 
            except those specified using a property expression.
            </summary>
            <param name="propertyExpression">A single property expression to exclude.</param>
            <param name="propertyExpressions">Optional list of additional property expressions to exclude.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.PropertyAssertions`1.But(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Excludes the properties specified by the <paramref name="propertyExpression"/> from the comparison.
            </summary>
            <param name="propertyExpression">A single property expression to exclude.</param>
            <param name="propertyExpressions">Optional list of additional property expressions to exclude.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.PropertyAssertions`1.Properties(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Includes only those properties of <typeparamref name="T"/> when comparing the subject with another object using <see cref="M:FluentAssertions.Assertions.PropertyAssertions`1.EqualTo(System.Object)"/>
            that were specified using a property expression.
            </summary>
            <param name="propertyExpression">A single property expression to include.</param>
            <param name="propertyExpressions">Optional list of additional property expressions to include.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.PropertyAssertions`1.EqualTo(System.Object)">
            <summary>
            Asserts that the previously selected properties of <typeparamref name="T"/> have the same value as the equally named
            properties of <paramref name="otherObject"/>.
            </summary>
            <param name="otherObject">The object to compare the current object with</param>
            <remarks>
            Property values are considered equal if, after converting them to the requested type, calling <see cref="M:FluentAssertions.Assertions.PropertyAssertions`1.EqualTo(System.Object)"/> 
            returns <c>true</c>.
            </remarks>
        </member>
        <member name="M:FluentAssertions.Assertions.PropertyAssertions`1.EqualTo(System.Object,System.String,System.Object[])">
            <summary>
            Asserts that the previously selected properties of <typeparamref name="T"/> have the same value as the equally named
            properties of <paramref name="otherObject"/>.
            </summary>
            <param name="otherObject">The object to compare the current object with</param>
            <remarks>
            Property values are considered equal if, after converting them to the requested type, calling <see cref="M:FluentAssertions.Assertions.PropertyAssertions`1.EqualTo(System.Object)"/> 
            returns <c>true</c>.
            </remarks>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="P:FluentAssertions.Assertions.PropertyAssertions`1.Subject">
            <summary>
            Gets the object which value is being asserted.
            </summary>
        </member>
        <member name="T:FluentAssertions.Assertions.PropertyEqualityValidator">
            <summary>
            Is responsible for validating the equality of one or more properties of a subject with another object.
            </summary>
        </member>
        <member name="P:FluentAssertions.Assertions.PropertyEqualityValidator.Properties">
            <summary>
            Contains the properties that should be included when comparing two objects.
            </summary>
        </member>
        <member name="P:FluentAssertions.Assertions.PropertyEqualityValidator.OnlySharedProperties">
            <summary>
            Gets or sets a value indicating whether the validator will ignore properties from the <see cref="P:FluentAssertions.Assertions.PropertyEqualityValidator.Properties"/>
            collection that the <see cref="!:Other"/> object doesn't have.
            </summary>
        </member>
        <member name="P:FluentAssertions.Assertions.PropertyEqualityValidator.RecurseOnNestedObjects">
            <summary>
            Gets or sets a value indicating whether it should continue comparing (collections of objects) that
            the <see cref="P:FluentAssertions.Assertions.PropertyEqualityValidator.OtherObject"/> refers to.
            </summary>
        </member>
        <member name="P:FluentAssertions.Assertions.PropertyEqualityValidator.CyclicReferenceHandling">
            <summary>
            Gets or sets a value indicating how cyclic references that are encountered while comparing (collections of)
            objects should be handled.
            </summary>
        </member>
        <member name="T:FluentAssertions.Assertions.PropertyInfoAssertions">
            <summary>
            Contains assertions for the <see cref="T:System.Reflection.PropertyInfo"/> objects returned by the parent <see cref="T:FluentAssertions.Assertions.PropertyInfoSelector"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.PropertyInfoAssertions.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:FluentAssertions.Assertions.PropertyInfoAssertions"/> class.
            </summary>
            <param name="properties">The properties.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.PropertyInfoAssertions.BeVirtual">
            <summary>
            Asserts that the selected properties are virtual.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.PropertyInfoAssertions.BeVirtual(System.String,System.Object[])">
            <summary>
            Asserts that the selected properties are virtual.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.PropertyInfoAssertions.BeDecoratedWith``1">
            <summary>
            Asserts that the selected methods are decorated with the specified <typeparamref name="TAttribute"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.PropertyInfoAssertions.BeDecoratedWith``1(System.String,System.Object[])">
            <summary>
            Asserts that the selected methods are decorated with the specified <typeparamref name="TAttribute"/>.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="P:FluentAssertions.Assertions.PropertyInfoAssertions.SubjectProperties">
            <summary>
            Gets the object which value is being asserted.
            </summary>
        </member>
        <member name="T:FluentAssertions.Assertions.PropertyInfoSelector">
            <summary>
            Allows for fluent selection of properties of a type through reflection.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.PropertyInfoSelector.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentAssertions.Assertions.PropertyInfoSelector"/> class.
            </summary>
            <param name="type">The type from which to select properties.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.PropertyInfoSelector.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:FluentAssertions.Assertions.PropertyInfoSelector"/> class.
            </summary>
            <param name="types">The types from which to select properties.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.PropertyInfoSelector.ThatAreDecoratedWith``1">
            <summary>
            Only select the properties that are decorated with an attribute of the specified type.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.PropertyInfoSelector.OfType``1">
            <summary>
            Only select the properties that return the specified type 
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.PropertyInfoSelector.ToArray">
            <summary>
            The resulting <see cref="T:System.Reflection.PropertyInfo"/> objects.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.PropertyInfoSelector.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:FluentAssertions.Assertions.PropertyInfoSelector.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:FluentAssertions.Assertions.PropertyInfoSelector.ThatArePublicOrInternal">
            <summary>
            Only select the properties that have a public or internal getter.
            </summary>
        </member>
        <member name="T:FluentAssertions.Assertions.StringAssertions">
            <summary>
            Contains a number of methods to assert that a <see cref="T:System.String"/> is in the expected state.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object" /> class.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.Be(System.String)">
            <summary>
            Asserts that a string is equal to another string.
            </summary>
            <param name="expected">The expected string.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.Be(System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string is exactly the same as another string, including the casing and any leading or trailing whitespace.
            </summary>
            <param name="expected">The expected string.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.BeEquivalentTo(System.String)">
            <summary>
            Asserts that a string is exactly the same as another string, including any leading or trailing whitespace, with 
            the exception of the casing.
            </summary>
            <param name="expected">
            The string that the subject is expected to be equivalent to.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.BeEquivalentTo(System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string is exactly the same as another string, including any leading or trailing whitespace, with 
            the exception of the casing.
            </summary>
            <param name="expected">
            The string that the subject is expected to be equivalent to.
            </param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.NotBe(System.String)">
            <summary>
            Asserts that a string is not exactly the same as the specified <paramref name="unexpected"/>,
            including any leading or trailing whitespace, with the exception of the casing.
            </summary>
            <param name="unexpected">The string that the subject is not expected to be equivalent to.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.NotBe(System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string is not exactly the same as the specified <paramref name="unexpected"/>,
            including any leading or trailing whitespace, with the exception of the casing.
            </summary>
            <param name="unexpected">The string that the subject is not expected to be equivalent to.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.Match(System.String)">
            <summary>
            Asserts that a string matches a wildcard pattern.
            </summary>
            <param name="wildcardPattern">
            The wildcard pattern with which the subject is matched, where * and ? have special meanings.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.Match(System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string matches a wildcard pattern.
            </summary>
            <param name="wildcardPattern">
            The wildcard pattern with which the subject is matched, where * and ? have special meanings.
            </param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.NotMatch(System.String)">
            <summary>
            Asserts that a string does not match a wildcard pattern.
            </summary>
            <param name="wildcardPattern">
            The wildcard pattern with which the subject is matched, where * and ? have special meanings.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.NotMatch(System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string does not match a wildcard pattern.
            </summary>
            <param name="wildcardPattern">
            The wildcard pattern with which the subject is matched, where * and ? have special meanings.
            </param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.MatchEquivalentOf(System.String)">
            <summary>
            Asserts that a string matches a wildcard pattern.
            </summary>
            <param name="wildcardPattern">
            The wildcard pattern with which the subject is matched, where * and ? have special meanings.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.MatchEquivalentOf(System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string matches a wildcard pattern.
            </summary>
            <param name="wildcardPattern">
            The wildcard pattern with which the subject is matched, where * and ? have special meanings.
            </param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.NotMatchEquivalentOf(System.String)">
            <summary>
            Asserts that a string does not match a wildcard pattern.
            </summary>
            <param name="wildcardPattern">
            The wildcard pattern with which the subject is matched, where * and ? have special meanings.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.NotMatchEquivalentOf(System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string does not match a wildcard pattern.
            </summary>
            <param name="wildcardPattern">
            The wildcard pattern with which the subject is matched, where * and ? have special meanings.
            </param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.StartWith(System.String)">
            <summary>
            Asserts that a string starts exactly with the specified <paramref name="expected"/>,
            including the casing and any leading or trailing whitespace.
            </summary>
            <param name="expected">The string that the subject is expected to start with.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.StartWith(System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string starts exactly with the specified <paramref name="expected"/>,
            including the casing and any leading or trailing whitespace.
            </summary>
            <param name="expected">The string that the subject is expected to start with.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.StartWithEquivalent(System.String)">
            <summary>
            Asserts that a string starts with the specified <paramref name="expected"/>,
            including any leading or trailing whitespace, with the exception of the casing.
            </summary>
            <param name="expected">The string that the subject is expected to start with.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.StartWithEquivalent(System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string starts with the specified <paramref name="expected"/>,
            including any leading or trailing whitespace, with the exception of the casing.
            </summary>
            <param name="expected">The string that the subject is expected to start with.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.EndWith(System.String)">
            <summary>
            Asserts that a string ends exactly with the specified <paramref name="expected"/>,
            including the casing and any leading or trailing whitespace.
            </summary>
            <param name="expected">The string that the subject is expected to end with.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.EndWith(System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string ends exactly with the specified <paramref name="expected"/>,
            including the casing and any leading or trailing whitespace.
            </summary>
            <param name="expected">The string that the subject is expected to end with.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.EndWithEquivalent(System.String)">
            <summary>
            Asserts that a string ends with the specified <paramref name="expected"/>,
            including any leading or trailing whitespace, with the exception of the casing.
            </summary>
            <param name="expected">The string that the subject is expected to end with.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.EndWithEquivalent(System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string ends with the specified <paramref name="expected"/>,
            including any leading or trailing whitespace, with the exception of the casing.
            </summary>
            <param name="expected">The string that the subject is expected to end with.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.Contain(System.String)">
            <summary>
            Asserts that a string contains another (fragment of a) string.
            </summary>
            <param name="expected">
            The (fragement of a) string that the current string should contain.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.Contain(System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string contains another (fragment of a) string.
            </summary>
            <param name="expected">
            The (fragement of a) string that the current string should contain.
            </param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.ContainEquivalentOf(System.String)">
            <summary>
            Asserts that a string contains the specified <paramref name="expected"/>,
            including any leading or trailing whitespace, with the exception of the casing.
            </summary>
            <param name="expected">The string that the subject is expected to contain.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.ContainEquivalentOf(System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string contains the specified <paramref name="expected"/>,
            including any leading or trailing whitespace, with the exception of the casing.
            </summary>
            <param name="expected">The string that the subject is expected to contain.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.NotContain(System.String)">
            <summary>
            Asserts that a string does not contain another (fragment of a) string.
            </summary>
            <param name="expected">
            The (fragement of a) string that the current string should not contain.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.NotContain(System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string does not contain another (fragment of a) string.
            </summary>
            <param name="expected">
            The (fragement of a) string that the current string should not contain.
            </param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.NotContainEquivalentOf(System.String)">
            <summary>
            Asserts that a string does not contain the specified <paramref name="unexpected"/> string,
            including any leading or trailing whitespace, with the exception of the casing.
            </summary>
            <param name="unexpected">The string that the subject is not expected to contain.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.NotContainEquivalentOf(System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string does not contain the specified <paramref name="unexpected"/> string,
            including any leading or trailing whitespace, with the exception of the casing.
            </summary>
            <param name="unexpected">The string that the subject is not expected to contain.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.BeEmpty">
            <summary>
            Asserts that a string is <see cref="F:System.String.Empty"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.BeEmpty(System.String,System.Object[])">
            <summary>
            Asserts that a string is <see cref="F:System.String.Empty"/>.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.NotBeEmpty">
            <summary>
            Asserts that a string is not <see cref="F:System.String.Empty"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.NotBeEmpty(System.String,System.Object[])">
            <summary>
            Asserts that a string is not <see cref="F:System.String.Empty"/>.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.HaveLength(System.Int32)">
            <summary>
            Asserts that a string has the specified <paramref name="expected"/> length.
            </summary>
            <param name="expected">The expected length of the string</param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.HaveLength(System.Int32,System.String,System.Object[])">
            <summary>
            Asserts that a string has the specified <paramref name="expected"/> length.
            </summary>
            <param name="expected">The expected length of the string</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.BeNull">
            <summary>
            Asserts that a string is <c>null</c>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.BeNull(System.String,System.Object[])">
            <summary>
            Asserts that a string is <c>null</c>.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.NotBeNull">
            <summary>
            Asserts that a string is not <c>null</c>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.NotBeNull(System.String,System.Object[])">
            <summary>
            Asserts that a string is not <c>null</c>.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.NotBeNullOrEmpty">
            <summary>
            Asserts that a string is neither <c>null</c> nor <see cref="F:System.String.Empty"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.NotBeNullOrEmpty(System.String,System.Object[])">
            <summary>
            Asserts that a string is neither <c>null</c> nor <see cref="F:System.String.Empty"/>.
            </summary>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonArgs">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.BeNullOrEmpty">
            <summary>
            Asserts that a string is either <c>null</c> or <see cref="F:System.String.Empty"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.BeNullOrEmpty(System.String,System.Object[])">
            <summary>
            Asserts that a string is either <c>null</c> or <see cref="F:System.String.Empty"/>.
            </summary>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonArgs">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.NotBeBlank">
            <summary>
            Asserts that a string is neither <c>null</c> nor <see cref="F:System.String.Empty"/> nor white space
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.NotBeBlank(System.String,System.Object[])">
            <summary>
            Asserts that a string is neither <c>null</c> nor <see cref="F:System.String.Empty"/> nor white space
            </summary>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonArgs">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.BeBlank">
            <summary>
            Asserts that a string is either <c>null</c> or <see cref="F:System.String.Empty"/> or white space
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.StringAssertions.BeBlank(System.String,System.Object[])">
            <summary>
            Asserts that a string is either <c>null</c> or <see cref="F:System.String.Empty"/> or white space
            </summary>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonArgs">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="P:FluentAssertions.Assertions.StringAssertions.Subject">
            <summary>
            Gets the object which value is being asserted.
            </summary>
        </member>
        <member name="T:FluentAssertions.Assertions.StringValidator">
            <summary>
            Dedicated class for comparing two strings and generating consistent error messages.
            </summary>
        </member>
        <member name="P:FluentAssertions.Assertions.StringWildcardMatchingValidator.Negate">
            <summary>
            Gets or sets a value indicating whether the subject should not match the pattern.
            </summary>
        </member>
        <member name="P:FluentAssertions.Assertions.StringWildcardMatchingValidator.IgnoreCase">
            <summary>
            Gets or sets a value indicating whether the matching process should ignore any casing difference.
            </summary>
        </member>
        <member name="T:FluentAssertions.Assertions.TimeSpanAssertions">
            <summary>
            Contains a number of methods to assert that two <see cref="T:System.DateTime"/> objects differ in the expected way.
            </summary>
            <remarks>
            You can use the <see cref="T:FluentAssertions.Common.FluentDateTimeExtensions"/> and <see cref="T:FluentAssertions.Common.TimeSpanConversionExtensions"/> for a more fluent
            way of specifying a <see cref="T:System.DateTime"/> or a <see cref="T:System.TimeSpan"/>.
            </remarks>
        </member>
        <member name="M:FluentAssertions.Assertions.TimeSpanAssertions.Before(System.DateTime)">
            <summary>
            Asserts that a <see cref="T:System.DateTime"/> occurs a specified amount of time before another <see cref="T:System.DateTime"/>.
            </summary>
            <param name="target">
            The <see cref="T:System.DateTime"/> to compare the subject with.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.TimeSpanAssertions.Before(System.DateTime,System.String,System.Object[])">
            <summary>
            Asserts that a <see cref="T:System.DateTime"/> occurs a specified amount of time before another <see cref="T:System.DateTime"/>.
            </summary>
            <param name="target">
            The <see cref="T:System.DateTime"/> to compare the subject with.
            </param>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonArgs">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.TimeSpanAssertions.After(System.DateTime)">
            <summary>
            Asserts that a <see cref="T:System.DateTime"/> occurs a specified amount of time after another <see cref="T:System.DateTime"/>.
            </summary>
            <param name="target">
            The <see cref="T:System.DateTime"/> to compare the subject with.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.TimeSpanAssertions.After(System.DateTime,System.String,System.Object[])">
            <summary>
            Asserts that a <see cref="T:System.DateTime"/> occurs a specified amount of time after another <see cref="T:System.DateTime"/>.
            </summary>
            <param name="target">
            The <see cref="T:System.DateTime"/> to compare the subject with.
            </param>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonArgs">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="T:FluentAssertions.Assertions.TimeSpanAssertions.TimeSpanPredicate">
            <summary>
            Provides the logic and the display text for a <see cref="T:FluentAssertions.Assertions.TimeSpanCondition"/>.
            </summary>
        </member>
        <member name="T:FluentAssertions.Assertions.TypeAssertions">
            <summary>
            Contains a number of methods to assert that a <see cref="T:System.Type"/> meets certain expectations.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.TypeAssertions.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object" /> class.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.TypeAssertions.Be``1">
            <summary>
            Asserts that the current type is equal to the specified <typeparamref name="TExpected"/> type.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.TypeAssertions.Be``1(System.String,System.Object[])">
            <summary>
            Asserts that the current type is equal to the specified <typeparamref name="TExpected"/> type.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.TypeAssertions.Be(System.Type)">
            <summary>
            Asserts that the current type is equal to the specified <paramref name="expected"/> type.
            </summary>
            <param name="expected">The expected type</param>
        </member>
        <member name="M:FluentAssertions.Assertions.TypeAssertions.Be(System.Type,System.String,System.Object[])">
            <summary>
            Asserts that the current type is equal to the specified <paramref name="expected"/> type.
            </summary>
            <param name="expected">The expected type</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.TypeAssertions.GetFailureMessageIfTypesAreDifferent(System.Type,System.Type)">
            <summary>
            Creates an error message in case the specifed <paramref name="actual"/> type differs from the 
            <paramref name="expected"/> type.
            </summary>
            <returns>
            An empty <see cref="T:System.String"/> if the two specified types are the same, or an error message that describes that
            the two specified types are not the same.
            </returns>
        </member>
        <member name="M:FluentAssertions.Assertions.TypeAssertions.NotBe``1">
            <summary>
            Asserts that the current type is not equal to the specified <typeparamref name="TUnexpected"/> type.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.TypeAssertions.NotBe``1(System.String,System.Object[])">
            <summary>
            Asserts that the current type is not equal to the specified <typeparamref name="TUnexpected"/> type.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.TypeAssertions.NotBe(System.Type)">
            <summary>
            Asserts that the current type is not equal to the specified <paramref name="unexpected"/> type.
            </summary>
            <param name="unexpected">The unexpected type</param>
        </member>
        <member name="M:FluentAssertions.Assertions.TypeAssertions.NotBe(System.Type,System.String,System.Object[])">
            <summary>
            Asserts that the current type is not equal to the specified <paramref name="unexpected"/> type.
            </summary>
            <param name="unexpected">The unexpected type</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.TypeAssertions.BeDecoratedWith``1">
            <summary>
            Asserts that the <see cref="T:System.Type"/> is decorated with the specified <typeparamref name="TAttribute"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.TypeAssertions.BeDecoratedWith``1(System.String,System.Object[])">
            <summary>
            Asserts that the <see cref="T:System.Type"/> is decorated with the specified <typeparamref name="TAttribute"/>.
            </summary>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="P:FluentAssertions.Assertions.TypeAssertions.Subject">
            <summary>
            Gets the object which value is being asserted.
            </summary>
        </member>
        <member name="T:FluentAssertions.Assertions.TypeExtensions">
            <summary>
            Extension methods for getting method and property selectors for a type.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.TypeExtensions.Types(System.Reflection.Assembly)">
            <summary>
            Returns the types that are visible outside the specified <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.TypeExtensions.Methods(System.Type)">
            <summary>
            Returns a method selector for the current <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.TypeExtensions.Methods(FluentAssertions.Assertions.TypeSelector)">
            <summary>
            Returns a method selector for the current <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.TypeExtensions.Properties(System.Type)">
            <summary>
            Returns a property selector for the current <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.TypeExtensions.Properties(FluentAssertions.Assertions.TypeSelector)">
            <summary>
            Returns a property selector for the current <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="T:FluentAssertions.Assertions.TypeSelector">
            <summary>
            Allows for fluent filtering a list of types.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.TypeSelector.ThatDeriveFrom``1">
            <summary>
            Determines whether a type is a subclass of another type, but NOT the same type.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.TypeSelector.ThatImplement``1">
            <summary>
            Determines whether a type implements an interface (but is not the interface itself).
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.TypeSelector.ThatAreDecoratedWith``1">
            <summary>
            Determines whether a type is decorated with a particular attribute.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.TypeSelector.ThatAreInNamespace(System.String)">
            <summary>
            Determines whether the namespace of type is exactly <paramref name="namespace"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.TypeSelector.ThatAreUnderNamespace(System.String)">
            <summary>
            Determines whether the namespace of type is starts with <paramref name="namespace"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.TypeSelector.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:FluentAssertions.Assertions.TypeSelector.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:FluentAssertions.Assertions.XAttributeAssertions">
            <summary>
            Contains a number of methods to assert that an <see cref="T:System.Xml.Linq.XAttribute"/> is in the expected state.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.XAttributeAssertions.#ctor(System.Xml.Linq.XAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentAssertions.Assertions.XAttributeAssertions"/> class.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.XAttributeAssertions.Be(System.Xml.Linq.XAttribute)">
            <summary>
            Asserts that the current <see cref="T:System.Xml.Linq.XAttribute"/> equals the <paramref name="expected"/> attribute.
            </summary>
            <param name="expected">The expected attribute</param>
        </member>
        <member name="M:FluentAssertions.Assertions.XAttributeAssertions.Be(System.Xml.Linq.XAttribute,System.String,System.Object[])">
            <summary>
            Asserts that the current <see cref="T:System.Xml.Linq.XAttribute"/> equals the <paramref name="expected"/> attribute.
            </summary>
            <param name="expected">The expected attribute</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.XAttributeAssertions.NotBe(System.Xml.Linq.XAttribute)">
            <summary>
            Asserts that the current <see cref="T:System.Xml.Linq.XAttribute"/> does not equal the <paramref name="unexpected"/> attribute,
            using its <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="unexpected">The unexpected attribute</param>
        </member>
        <member name="M:FluentAssertions.Assertions.XAttributeAssertions.NotBe(System.Xml.Linq.XAttribute,System.String,System.Object[])">
            <summary>
            Asserts that the current <see cref="T:System.Xml.Linq.XAttribute"/> does not equal the <paramref name="unexpected"/> attribute,
            using its <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="unexpected">The unexpected attribute</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.XAttributeAssertions.BeNull">
            <summary>
            Asserts that the <see cref="T:System.Xml.Linq.XAttribute"/> is <c>null</c>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.XAttributeAssertions.BeNull(System.String,System.Object[])">
            <summary>
            Asserts that the <see cref="T:System.Xml.Linq.XAttribute"/> is <c>null</c>.
            </summary>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonArgs">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.XAttributeAssertions.NotBeNull">
            <summary>
            Asserts that the <see cref="T:System.Xml.Linq.XAttribute"/> is not <c>null</c>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.XAttributeAssertions.NotBeNull(System.String,System.Object[])">
            <summary>
            Asserts that the <see cref="T:System.Xml.Linq.XAttribute"/> is not <c>null</c>.
            </summary>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonArgs">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.XAttributeAssertions.HaveValue(System.String)">
            <summary>
            Asserts that the current <see cref="T:System.Xml.Linq.XAttribute"/> has the specified <paramref name="expected"/> value.
            </summary>
            <param name="expected">The expected value</param>
        </member>
        <member name="M:FluentAssertions.Assertions.XAttributeAssertions.HaveValue(System.String,System.String,System.Object[])">
            <summary>
            Asserts that the current <see cref="T:System.Xml.Linq.XAttribute"/> has the specified <paramref name="expected"/> value.
            </summary>
            <param name="expected">The expected value</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="P:FluentAssertions.Assertions.XAttributeAssertions.Subject">
            <summary>
            Gets the object which value is being asserted.
            </summary>
        </member>
        <member name="T:FluentAssertions.Assertions.XDocumentAssertions">
            <summary>
            Contains a number of methods to assert that an <see cref="T:System.Xml.Linq.XDocument"/> is in the expected state.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.XDocumentAssertions.#ctor(System.Xml.Linq.XDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentAssertions.Assertions.XDocumentAssertions"/> class.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.XDocumentAssertions.Be(System.Xml.Linq.XDocument)">
            <summary>
            Asserts that the current <see cref="T:System.Xml.Linq.XDocument"/> equals the <paramref name="expected"/> document,
            using its <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="expected">The expected document</param>
        </member>
        <member name="M:FluentAssertions.Assertions.XDocumentAssertions.Be(System.Xml.Linq.XDocument,System.String,System.Object[])">
            <summary>
            Asserts that the current <see cref="T:System.Xml.Linq.XDocument"/> equals the <paramref name="expected"/> document,
            using its <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="expected">The expected document</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.XDocumentAssertions.NotBe(System.Xml.Linq.XDocument)">
            <summary>
            Asserts that the current <see cref="T:System.Xml.Linq.XDocument"/> does not equal the <paramref name="unexpected"/> document,
            using its <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="unexpected">The unexpected document</param>
        </member>
        <member name="M:FluentAssertions.Assertions.XDocumentAssertions.NotBe(System.Xml.Linq.XDocument,System.String,System.Object[])">
            <summary>
            Asserts that the current <see cref="T:System.Xml.Linq.XDocument"/> does not equal the <paramref name="unexpected"/> document,
            using its <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="unexpected">The unexpected document</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.XDocumentAssertions.BeNull">
            <summary>
            Asserts that the <see cref="T:System.Xml.Linq.XDocument"/> is <c>null</c>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.XDocumentAssertions.BeNull(System.String,System.Object[])">
            <summary>
            Asserts that the <see cref="T:System.Xml.Linq.XDocument"/> is <c>null</c>.
            </summary>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonArgs">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.XDocumentAssertions.NotBeNull">
            <summary>
            Asserts that the <see cref="T:System.Xml.Linq.XDocument"/> is not <c>null</c>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.XDocumentAssertions.NotBeNull(System.String,System.Object[])">
            <summary>
            Asserts that the <see cref="T:System.Xml.Linq.XDocument"/> is not <c>null</c>.
            </summary>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonArgs">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.XDocumentAssertions.HaveRoot(System.String)">
            <summary>
            Asserts that the current <see cref="T:System.Xml.Linq.XDocument"/> has a root element with the specified
            <paramref name="expected"/> name.
            </summary>
            <param name="expected">The name of the expected root element of the current document.</param>
        </member>
        <member name="M:FluentAssertions.Assertions.XDocumentAssertions.HaveRoot(System.String,System.String,System.Object[])">
            <summary>
            Asserts that the current <see cref="T:System.Xml.Linq.XDocument"/> has a root element with the specified
            <paramref name="expected"/> name.
            </summary>
            <param name="expected">The name of the expected root element of the current document.</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.XDocumentAssertions.HaveElement(System.String)">
            <summary>
            Asserts that the <see cref="P:System.Xml.Linq.XDocument.Root"/> element of the current <see cref="T:System.Xml.Linq.XDocument"/> has a direct
            child element with the specified <paramref name="expected"/> name.
            </summary>
            <param name="expected">
            The name of the expected child element of the current document's Root <see cref="P:System.Xml.Linq.XDocument.Root"/> element.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.XDocumentAssertions.HaveElement(System.String,System.String,System.Object[])">
            <summary>
            Asserts that the <see cref="P:System.Xml.Linq.XDocument.Root"/> element of the current <see cref="T:System.Xml.Linq.XDocument"/> has a direct
            child element with the specified <paramref name="expected"/> name.
            </summary>
            <param name="expected">
            The name of the expected child element of the current document's Root <see cref="P:System.Xml.Linq.XDocument.Root"/> element.
            </param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="P:FluentAssertions.Assertions.XDocumentAssertions.Subject">
            <summary>
            Gets the object which value is being asserted.
            </summary>
        </member>
        <member name="T:FluentAssertions.Assertions.XElementAssertions">
            <summary>
            Contains a number of methods to assert that an <see cref="T:System.Xml.Linq.XElement"/> is in the expected state.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.XElementAssertions.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentAssertions.Assertions.XElementAssertions"/> class.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.XElementAssertions.Be(System.Xml.Linq.XElement)">
            <summary>
            Asserts that the current <see cref="T:System.Xml.Linq.XElement"/> equals the <paramref name="expected"/> element.
            </summary>
            <param name="expected">The expected element</param>
        </member>
        <member name="M:FluentAssertions.Assertions.XElementAssertions.Be(System.Xml.Linq.XElement,System.String,System.Object[])">
            <summary>
            Asserts that the current <see cref="T:System.Xml.Linq.XElement"/> equals the <paramref name="expected"/> element.
            </summary>
            <param name="expected">The expected element</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.XElementAssertions.NotBe(System.Xml.Linq.XElement)">
            <summary>
            Asserts that the current <see cref="T:System.Xml.Linq.XElement"/> does not equal the <paramref name="unexpected"/> element,
            using its <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="unexpected">The unexpected element</param>
        </member>
        <member name="M:FluentAssertions.Assertions.XElementAssertions.NotBe(System.Xml.Linq.XElement,System.String,System.Object[])">
            <summary>
            Asserts that the current <see cref="T:System.Xml.Linq.XElement"/> does not equal the <paramref name="unexpected"/> element,
            using its <see cref="M:System.Object.Equals(System.Object)"/> implementation.
            </summary>
            <param name="unexpected">The unexpected element</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.XElementAssertions.BeNull">
            <summary>
            Asserts that the <see cref="T:System.Xml.Linq.XElement"/> is <c>null</c>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.XElementAssertions.BeNull(System.String,System.Object[])">
            <summary>
            Asserts that the <see cref="T:System.Xml.Linq.XElement"/> is <c>null</c>.
            </summary>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonArgs">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.XElementAssertions.NotBeNull">
            <summary>
            Asserts that the <see cref="T:System.Xml.Linq.XElement"/> is not <c>null</c>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Assertions.XElementAssertions.NotBeNull(System.String,System.Object[])">
            <summary>
            Asserts that the <see cref="T:System.Xml.Linq.XElement"/> is not <c>null</c>.
            </summary>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonArgs">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.XElementAssertions.HaveAttribute(System.String,System.String)">
            <summary>
            Asserts that the current <see cref="T:System.Xml.Linq.XElement"/> has an attribute with the specified <paramref name="expectedName"/>
            and <paramref name="expectedValue"/>.
            </summary>
            <param name="expectedName">The name of the expected attribute</param>
            <param name="expectedValue">The value of the expected attribute</param>
        </member>
        <member name="M:FluentAssertions.Assertions.XElementAssertions.HaveAttribute(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that the current <see cref="T:System.Xml.Linq.XElement"/> has an attribute with the specified <paramref name="expectedName"/>
            and <paramref name="expectedValue"/>.
            </summary>
            <param name="expectedName">The name of the expected attribute</param>
            <param name="expectedValue">The value of the expected attribute</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="M:FluentAssertions.Assertions.XElementAssertions.HaveElement(System.String)">
            <summary>
            Asserts that the current <see cref="T:System.Xml.Linq.XElement"/> has a direct child element with the specified
            <paramref name="expected"/> name.
            </summary>
            <param name="expected">The name of the expected child element</param>
        </member>
        <member name="M:FluentAssertions.Assertions.XElementAssertions.HaveElement(System.String,System.String,System.Object[])">
            <summary>
            Asserts that the current <see cref="T:System.Xml.Linq.XElement"/> has a direct child element with the specified
            <paramref name="expected"/> name.
            </summary>
            <param name="expected">The name of the expected child element</param>
            <param name="reason">
            A formatted phrase as is supported by <see cref="M:System.String.Format(System.String,System.Object[])"/> explaining why the assertion 
            is needed. If the phrase does not start with the word <i>because</i>, it is prepended automatically.
            </param>
            <param name="reasonArgs">
            Zero or more objects to format using the placeholders in <see cref="!:reason"/>.
            </param>
        </member>
        <member name="P:FluentAssertions.Assertions.XElementAssertions.Subject">
            <summary>
            Gets the object which value is being asserted.
            </summary>
        </member>
        <member name="M:FluentAssertions.Common.Extensions.IndexOfFirstMismatch(System.String,System.String)">
            <summary>
            Finds the first index at which the <paramref name="value"/> does not match the <paramref name="expected"/>
            string anymore, including the exact casing.
            </summary>
        </member>
        <member name="M:FluentAssertions.Common.Extensions.IndexOfFirstMismatch(System.String,System.String,System.StringComparison)">
            <summary>
            Finds the first index at which the <paramref name="value"/> does not match the <paramref name="expected"/>
            string anymore, accounting for the specified <paramref name="stringComparison"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Common.Extensions.IndexedSegmentAt(System.String,System.Int32)">
            <summary>
            Gets the quoted three characters at the specified index of a string, including the index itself.
            </summary>
        </member>
        <member name="M:FluentAssertions.Common.Extensions.FirstLine(System.String)">
            <summary>
            Replaces all characters that might conflict with formatting placeholders and newlines with their escaped counterparts.
            </summary>
        </member>
        <member name="M:FluentAssertions.Common.Extensions.Escape(System.String)">
            <summary>
            Replaces all characters that might conflict with formatting placeholders and newlines with their escaped counterparts.
            </summary>
        </member>
        <member name="T:FluentAssertions.Common.FluentDateTimeExtensions">
            <summary>
            Extension methods on <see cref="T:System.Int32"/> to allow for a more fluent way of specifying a <see cref="T:System.DateTime"/>.
            </summary>
            <example>
            Instead of<br/>
            <br/>
            new DateTime(2011, 3, 10)<br/>
            <br/>
            you can write 3.March(2011)<br/>
            <br/>
            Or even<br/>
            <br/>
            3.March(2011).At(09, 30)
            </example>
            <seealso cref="T:FluentAssertions.Common.TimeSpanConversionExtensions"/>
        </member>
        <member name="M:FluentAssertions.Common.FluentDateTimeExtensions.January(System.Int32,System.Int32)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> value for the specified <paramref name="day"/> and <paramref name="year"/>
            in the month January.
            </summary>
        </member>
        <member name="M:FluentAssertions.Common.FluentDateTimeExtensions.February(System.Int32,System.Int32)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> value for the specified <paramref name="day"/> and <paramref name="year"/>
            in the month February.
            </summary>
        </member>
        <member name="M:FluentAssertions.Common.FluentDateTimeExtensions.March(System.Int32,System.Int32)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> value for the specified <paramref name="day"/> and <paramref name="year"/>
            in the month March.
            </summary>
        </member>
        <member name="M:FluentAssertions.Common.FluentDateTimeExtensions.April(System.Int32,System.Int32)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> value for the specified <paramref name="day"/> and <paramref name="year"/>
            in the month April.
            </summary>
        </member>
        <member name="M:FluentAssertions.Common.FluentDateTimeExtensions.May(System.Int32,System.Int32)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> value for the specified <paramref name="day"/> and <paramref name="year"/>
            in the month May.
            </summary>
        </member>
        <member name="M:FluentAssertions.Common.FluentDateTimeExtensions.June(System.Int32,System.Int32)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> value for the specified <paramref name="day"/> and <paramref name="year"/>
            in the month June.
            </summary>
        </member>
        <member name="M:FluentAssertions.Common.FluentDateTimeExtensions.July(System.Int32,System.Int32)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> value for the specified <paramref name="day"/> and <paramref name="year"/>
            in the month July.
            </summary>
        </member>
        <member name="M:FluentAssertions.Common.FluentDateTimeExtensions.August(System.Int32,System.Int32)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> value for the specified <paramref name="day"/> and <paramref name="year"/>
            in the month August.
            </summary>
        </member>
        <member name="M:FluentAssertions.Common.FluentDateTimeExtensions.September(System.Int32,System.Int32)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> value for the specified <paramref name="day"/> and <paramref name="year"/>
            in the month September.
            </summary>
        </member>
        <member name="M:FluentAssertions.Common.FluentDateTimeExtensions.October(System.Int32,System.Int32)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> value for the specified <paramref name="day"/> and <paramref name="year"/>
            in the month October.
            </summary>
        </member>
        <member name="M:FluentAssertions.Common.FluentDateTimeExtensions.November(System.Int32,System.Int32)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> value for the specified <paramref name="day"/> and <paramref name="year"/>
            in the month November.
            </summary>
        </member>
        <member name="M:FluentAssertions.Common.FluentDateTimeExtensions.December(System.Int32,System.Int32)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> value for the specified <paramref name="day"/> and <paramref name="year"/>
            in the month December.
            </summary>
        </member>
        <member name="M:FluentAssertions.Common.FluentDateTimeExtensions.At(System.DateTime,System.TimeSpan)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> value for the specified <paramref name="date"/> and <paramref name="time"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Common.FluentDateTimeExtensions.At(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> value for the specified <paramref name="date"/> and time with the specified
            <paramref name="hours"/>, <paramref name="minutes"/> and optionally <paramref name="seconds"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Common.FluentDateTimeExtensions.Before(System.TimeSpan,System.DateTime)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> value that is the current <see cref="T:System.TimeSpan"/> before the
            specified <paramref name="sourceDateTime"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Common.FluentDateTimeExtensions.After(System.TimeSpan,System.DateTime)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> value that is the current <see cref="T:System.TimeSpan"/> after the
            specified <paramref name="sourceDateTime"/>.
            </summary>
        </member>
        <member name="T:FluentAssertions.Common.ObjectAlreadyTrackedException">
            <summary>
            Is thrown when the <see cref="T:FluentAssertions.Common.UniqueObjectTracker"/> detects an object that was already processed.
            </summary>
        </member>
        <member name="T:FluentAssertions.Common.TimeSpanConversionExtensions">
            <summary>
            Extension methods on <see cref="T:System.Int32"/> to allow for a more fluent way of specifying a <see cref="T:System.TimeSpan"/>.
            </summary>
            <example>
            Instead of<br/>
            <br/>
            TimeSpan.FromHours(12)<br/>
            <br/>
            you can write<br/>
            <br/>
            12.Hours()<br/>
            <br/>
            Or even<br/>
            <br/>
            12.Hours().And(30.Minutes()).
            </example>
            <seealso cref="T:FluentAssertions.Common.FluentDateTimeExtensions"/>
        </member>
        <member name="M:FluentAssertions.Common.TimeSpanConversionExtensions.Milliseconds(System.Int32)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> based on a number of milliseconds.
            </summary>
        </member>
        <member name="M:FluentAssertions.Common.TimeSpanConversionExtensions.Seconds(System.Int32)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> based on a number of seconds.
            </summary>
        </member>
        <member name="M:FluentAssertions.Common.TimeSpanConversionExtensions.Seconds(System.Int32,System.TimeSpan)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> based on a number of seconds, and add the specified
            <paramref name="offset"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Common.TimeSpanConversionExtensions.Minutes(System.Int32)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> based on a number of minutes.
            </summary>
        </member>
        <member name="M:FluentAssertions.Common.TimeSpanConversionExtensions.Minutes(System.Int32,System.TimeSpan)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> based on a number of minutes, and add the specified
            <paramref name="offset"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Common.TimeSpanConversionExtensions.Hours(System.Int32)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> based on a number of hours.
            </summary>
        </member>
        <member name="M:FluentAssertions.Common.TimeSpanConversionExtensions.Hours(System.Int32,System.TimeSpan)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> based on a number of hours, and add the specified
            <paramref name="offset"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Common.TimeSpanConversionExtensions.Days(System.Int32)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> based on a number of days.
            </summary>
        </member>
        <member name="M:FluentAssertions.Common.TimeSpanConversionExtensions.Days(System.Int32,System.TimeSpan)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> based on a number of days, and add the specified
            <paramref name="offset"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.Common.TimeSpanConversionExtensions.And(System.TimeSpan,System.TimeSpan)">
            <summary>
            Convenience method for chaining multiple calls to the methods provided by this class.
            </summary>
            <example>
            23.Hours().And(59.Minutes())
            </example>
        </member>
        <member name="T:FluentAssertions.Common.UniqueObjectTracker">
            <summary>
            Simple class for detecting an attempt to process an object that were already processed.
            </summary>
        </member>
        <member name="M:FluentAssertions.Common.UniqueObjectTracker.Track(System.Object)">
            <summary>
            Tracks the specified reference but throws an <see cref="T:FluentAssertions.Common.ObjectAlreadyTrackedException"/>
            if that reference was already tracked.
            </summary>
        </member>
        <member name="T:FluentAssertions.EventMonitoring.EventHandlerFactory">
            <summary>
              Static methods that aid in generic event subscription
            </summary>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventHandlerFactory.GenerateHandler(System.Type,FluentAssertions.EventMonitoring.IEventRecorder)">
            <summary>
              Generates an eventhandler for an event of type eventSignature that calls RegisterEvent on recorder
              when invoked.
            </summary>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventHandlerFactory.GetDelegateReturnType(System.Type)">
            <summary>
              Finds the Return Type of a Delegate.
            </summary>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventHandlerFactory.GetDelegateParameterTypes(System.Type)">
            <summary>
              Returns an Array of Types that make up a delegate's parameter signature.
            </summary>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventHandlerFactory.AppendParameterListThisReference(System.Type[])">
            <summary>
              Returns an array of types appended with an EventRecorder reference at the beginning.
            </summary>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventHandlerFactory.TypeIsDelegate(System.Type)">
            <summary>
              Returns T/F Dependent on a Type Being a Delegate.
            </summary>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventHandlerFactory.DelegateInvokeMethod(System.Type)">
            <summary>
              Returns the MethodInfo for the Delegate's "Invoke" Method.
            </summary>
        </member>
        <member name="T:FluentAssertions.EventMonitoring.EventMonitoringExtensions">
            <summary>
              Provides extension methods for monitoring and querying events.
            </summary>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventMonitoringExtensions.MonitorEvents(System.Object)">
            <summary>
              Starts monitoring an object for its events.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if eventSource is Null.</exception>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventMonitoringExtensions.ShouldRaise(System.Object,System.String)">
            <summary>
            Asserts that an object has raised a particular event at least once.
            </summary>
            <param name="eventSource">The object exposing the event.</param>
            <param name="eventName">The name of the event that should have been raised.</param>
            <returns></returns>
            <remarks>
            You must call <see cref="M:FluentAssertions.EventMonitoring.EventMonitoringExtensions.MonitorEvents(System.Object)"/> on the same object prior to this call so that Fluent Assertions can
            subscribe for the events of the object.
            </remarks>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventMonitoringExtensions.ShouldRaise(System.Object,System.String,System.String,System.Object[])">
            <summary>
            Asserts that an object has raised a particular event at least once.
            </summary>
            <param name="eventSource">The object exposing the event.</param>
            <param name="eventName">
            The name of the event that should have been raised.
            </param>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonArgs">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
            <remarks>
            You must call <see cref="M:FluentAssertions.EventMonitoring.EventMonitoringExtensions.MonitorEvents(System.Object)"/> on the same object prior to this call so that Fluent Assertions can
            subscribe for the events of the object.
            </remarks>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventMonitoringExtensions.ShouldNotRaise(System.Object,System.String)">
            <summary>
            Asserts that an object has not raised a particular event.
            </summary>
            <param name="eventSource">The object exposing the event.</param>
            <param name="eventName">
            The name of the event that should not be raised.
            </param>
            <remarks>
            You must call <see cref="M:FluentAssertions.EventMonitoring.EventMonitoringExtensions.MonitorEvents(System.Object)"/> on the same object prior to this call so that Fluent Assertions can
            subscribe for the events of the object.
            </remarks>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventMonitoringExtensions.ShouldNotRaise(System.Object,System.String,System.String,System.Object[])">
            <summary>
            Asserts that an object has not raised a particular event.
            </summary>
            <param name="eventSource">The object exposing the event.</param>
            <param name="eventName">
            The name of the event that should not be raised.
            </param>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonArgs">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
            <remarks>
            You must call <see cref="M:FluentAssertions.EventMonitoring.EventMonitoringExtensions.MonitorEvents(System.Object)"/> on the same object prior to this call so that Fluent Assertions can
            subscribe for the events of the object.
            </remarks>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventMonitoringExtensions.ShouldRaisePropertyChangeFor``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Asserts that an object has raised the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event for a particular property.
            </summary>
            <remarks>
            You must call <see cref="M:FluentAssertions.EventMonitoring.EventMonitoringExtensions.MonitorEvents(System.Object)"/> on the same object prior to this call so that Fluent Assertions can
            subscribe for the events of the object.
            </remarks>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventMonitoringExtensions.ShouldRaisePropertyChangeFor``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Object[])">
            <summary>
            Asserts that an object has raised the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event for a particular property.
            </summary>
            <param name="eventSource">The object exposing the event.</param>
            <param name="propertyExpression">
            A lambda expression referring to the property for which the property changed event should have been raised.
            </param>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonArgs">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
            <remarks>
            You must call <see cref="M:FluentAssertions.EventMonitoring.EventMonitoringExtensions.MonitorEvents(System.Object)"/> on the same object prior to this call so that Fluent Assertions can
            subscribe for the events of the object.
            </remarks>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventMonitoringExtensions.ShouldNotRaisePropertyChangeFor``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Asserts that an object has not raised the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event for a particular property.
            </summary>
            <remarks>
            You must call <see cref="M:FluentAssertions.EventMonitoring.EventMonitoringExtensions.MonitorEvents(System.Object)"/> on the same object prior to this call so that Fluent Assertions can
            subscribe for the events of the object.
            </remarks>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventMonitoringExtensions.ShouldNotRaisePropertyChangeFor``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Object[])">
            <summary>
            Asserts that an object has not raised the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event for a particular property.
            </summary>
            <param name="eventSource">The object exposing the event.</param>
            <param name="propertyExpression">
            A lambda expression referring to the property for which the property changed event should have been raised.
            </param>
            <param name="reason">
            A formatted phrase explaining why the assertion should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonArgs">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
            <remarks>
            You must call <see cref="M:FluentAssertions.EventMonitoring.EventMonitoringExtensions.MonitorEvents(System.Object)"/> on the same object prior to this call so that Fluent Assertions can
            subscribe for the events of the object.
            </remarks>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventMonitoringExtensions.WithSender(FluentAssertions.EventMonitoring.IEventRecorder,System.Object)">
            <summary>
            Asserts that all occurences of the event originated from the <param name="expectedSender"/>.
            </summary>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventMonitoringExtensions.WithArgs``1(FluentAssertions.EventMonitoring.IEventRecorder,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Asserts that at least one occurrence of the event had an <see cref="T:System.EventArgs"/> object matching a predicate.
            </summary>
        </member>
        <member name="T:FluentAssertions.EventMonitoring.EventRecorder">
            <summary>
              Records activity for a single event.
            </summary>
        </member>
        <member name="T:FluentAssertions.EventMonitoring.IEventRecorder">
            <summary>
              Records raised events for one event on one object
            </summary>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.IEventRecorder.RecordEvent(System.Object[])">
            <summary>
              Store information about a raised event
            </summary>
            <param name = "parameters">Parameters the event was raised with</param>
        </member>
        <member name="P:FluentAssertions.EventMonitoring.IEventRecorder.EventObject">
            <summary>
              The object events are recorded from
            </summary>
        </member>
        <member name="P:FluentAssertions.EventMonitoring.IEventRecorder.EventName">
            <summary>
              The name of the event that's recorded
            </summary>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventRecorder.#ctor(System.Object,System.String)">
            <summary>
            </summary>
            <param name = "eventRaiser">The object events are recorded from</param>
            <param name = "eventName">The name of the event that's recorded</param>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventRecorder.GetEnumerator">
            <summary>
              Enumerate raised events
            </summary>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventRecorder.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Enumerate raised events
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.EventRecorder.RecordEvent(System.Object[])">
            <summary>
              Called by the auto-generated IL, to record information about a raised event.
            </summary>
        </member>
        <member name="P:FluentAssertions.EventMonitoring.EventRecorder.EventObject">
            <summary>
              The object events are recorded from
            </summary>
        </member>
        <member name="P:FluentAssertions.EventMonitoring.EventRecorder.EventName">
            <summary>
              The name of the event that's recorded
            </summary>
        </member>
        <member name="T:FluentAssertions.EventMonitoring.EventRecordersMap">
            <summary>
                Simple dictionary that uses a <see cref="T:System.WeakReference"/> to the event source as the key. 
                This should ensure the Garbage Collector can still clean-up the event source object.
            </summary>
        </member>
        <member name="T:FluentAssertions.EventMonitoring.RecordedEvent">
            <summary>
            This class is used to store data about an intercepted event
            </summary>
        </member>
        <member name="M:FluentAssertions.EventMonitoring.RecordedEvent.#ctor(System.Object,System.Object[])">
            <summary>
            Default constructor stores the parameters the event was raised with
            </summary>
        </member>
        <member name="P:FluentAssertions.EventMonitoring.RecordedEvent.Parameters">
            <summary>
            Parameters for the event
            </summary>
        </member>
        <member name="T:FluentAssertions.Execute">
            <summary>
            Helper class for verifying a condition and/or throwing a test harness specific exception representing an assertion failure.
            </summary>
        </member>
        <member name="M:FluentAssertions.Execute.Verify(System.Func{System.Boolean},System.String,System.Object,System.Object,System.String,System.Object[])">
            <summary>
              Asserts that the supplied <paramref name = "condition" /> is met.
            </summary>
            <param name = "condition">The condition to assert.</param>
            <param name = "failureMessage">
              The message that will be used in the exception. This should describe what was expected and why. This message 
              can contain the following three placeholders:<br />
              <list type = "bullet">
                <item>{0} = the expected value</item>
                <item>{1} = the actual value</item>
                <item>{2} = a reason explaining the expectations</item>
              </list><br />
            </param>
            <param name = "expected">
              The expected value, or <c>null</c> if there is no explicit expected value.
            </param>
            <param name = "actual">The actual value, or <c>null</c> if there is no explicit actual value.</param>
            <param name = "reason">Should describe the reason for the expectation.</param>
            <param name = "reasonArgs">Optional args for formatting placeholders in the <paramref name = "reason" />.</param>
        </member>
        <member name="M:FluentAssertions.Execute.Verify(System.Boolean,System.String,System.Object,System.Object,System.String,System.Object[])">
            <summary>
              Asserts that the supplied <paramref name = "condition" /> is met.
            </summary>
            <param name = "condition">The condition to assert.</param>
            <param name = "failureMessage">
              The message that will be used in the exception. This should describe what was expected and why. This message 
              can contain the following three placeholders:<br />
              <list type = "bullet">
                <item>{0} = the expected value</item>
                <item>{1} = the actual value</item>
                <item>{2} = a reason explaining the expectations</item>
              </list><br />
            </param>
            <param name = "expected">
              The expected value, or <c>null</c> if there is no explicit expected value.
            </param>
            <param name = "actual">The actual value, or <c>null</c> if there is no explicit actual value.</param>
            <param name = "reason">Should describe the reason for the expectation.</param>
            <param name = "reasonArgs">Optional args for formatting placeholders in the <paramref name = "reason" />.</param>
        </member>
        <member name="M:FluentAssertions.Execute.Fail(System.String,System.Object,System.Object,System.String,System.Object[],System.Object[])">
            <summary>
              Handles an assertion failure.
            </summary>
            <param name = "failureMessage">
              The message that will be used in the exception. This should describe what was expected and why. This message 
              can contain the following three placeholders:<br />
              <list type = "bullet">
                <item>{0} = the expected value</item>
                <item>{1} = the actual value</item>
                <item>{2} = a reason explaining the expectations</item>
              </list><br />
              Any additional placeholders are allowed and will be satisfied using the <paramref name = "failureMessageArgs" />.
            </param>
            <param name = "expected">
              The expected value, or <c>null</c> if there is no explicit expected value.
            </param>
            <param name = "actual">The actual value, or <c>null</c> if there is no explicit actual value.</param>
            <param name = "reason">Should describe the reason for the expectation.</param>
            <param name = "reasonArgs">Optional args for formatting placeholders in the <paramref name = "reason" />.</param>
            <param name = "failureMessageArgs">
              Optional arguments to satisfy any additional placeholders in the <paramref name = "failureMessage" />
            </param>
        </member>
        <member name="P:FluentAssertions.Execute.Verification">
            <summary>
            Gets an object that wraps and executes a conditional or unconditional verification.
            </summary>
        </member>
        <member name="M:FluentAssertions.Formatting.IValueFormatter.CanHandle(System.Object)">
            <summary>
            Indicates whether the current <see cref="T:FluentAssertions.Formatting.IValueFormatter"/> can handle the specified <paramref name="value"/>.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <returns>
            <c>true</c> if the current <see cref="T:FluentAssertions.Formatting.IValueFormatter"/> can handle the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FluentAssertions.Formatting.IValueFormatter.ToString(System.Object,FluentAssertions.Common.UniqueObjectTracker,System.Int32)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <param name="uniqueObjectTracker">
            An object that is passed through recursive calls and which should be used to detect circular references
            in the object graph that is being converted to a string representation.</param>
            <param name="nestedPropertyLevel">
                The level of nesting for the supplied value. This is used for indenting the format string for objects that have
                no <see cref="M:System.Object.ToString"/> override.
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FluentAssertions.Formatting.DateTimeValueFormatter.ToString(System.Object,FluentAssertions.Common.UniqueObjectTracker,System.Int32)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <param name="uniqueObjectTracker">
            An object that is passed through recursive calls and which should be used to detect circular references
            in the object graph that is being converted to a string representation.</param>
            <param name="nestedPropertyLevel">
                The level of nesting for the supplied value. This is used for indenting the format string for objects that have
                no <see cref="M:System.Object.ToString"/> override.
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FluentAssertions.Formatting.DefaultValueFormatter.CanHandle(System.Object)">
            <summary>
              Determines whether this instance can handle the specified value.
            </summary>
            <param name = "value">The value.</param>
            <returns>
              <c>true</c> if this instance can handle the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FluentAssertions.Formatting.DefaultValueFormatter.ToString(System.Object,FluentAssertions.Common.UniqueObjectTracker,System.Int32)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <param name="uniqueObjectTracker">
            An object that is passed through recursive calls and which should be used to detect circular references
            in the object graph that is being converted to a string representation.</param>
            <param name="nestedPropertyLevel">
                The level of nesting for the supplied value. This is used for indenting the format string for objects that have
                no <see cref="M:System.Object.ToString"/> override.
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FluentAssertions.Formatting.EnumerableValueFormatter.ToString(System.Object,FluentAssertions.Common.UniqueObjectTracker,System.Int32)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <param name="uniqueObjectTracker">
            An object that is passed through recursive calls and which should be used to detect circular references
            in the object graph that is being converted to a string representation.</param>
            <param name="nestedPropertyLevel">
                The level of nesting for the supplied value. This is used for indenting the format string for objects that have
                no <see cref="M:System.Object.ToString"/> override.
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:FluentAssertions.Formatting.Formatter">
            <summary>
            Provides services for formatting an object being used in an assertion in a human readable format.
            </summary>
        </member>
        <member name="F:FluentAssertions.Formatting.Formatter.formatters">
            <summary>
            A list of objects responsible for formatting the objects represented by placeholders.
            </summary>
        </member>
        <member name="M:FluentAssertions.Formatting.Formatter.ToString(System.Object,FluentAssertions.Common.UniqueObjectTracker,System.Int32)">
            <summary>
            Returns a human-readable representation of a particular object.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <param name="uniqueObjectTracker"></param>
            <param name="nestedPropertyLevel">
                The level of nesting for the supplied value. This is used for indenting the format string for objects that have
                no <see cref="M:System.Object.ToString"/> override.
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FluentAssertions.Formatting.Formatter.ToStringLine(System.Object,FluentAssertions.Common.UniqueObjectTracker,System.Int32)">
            <summary>
            Returns a human-readable representation of a particular object that starts on a new line.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <param name="nestedPropertyLevel">
            The level of nesting for the supplied value. This is used for indenting the format string for objects that have
            no <see cref="M:System.Object.ToString"/> override.
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FluentAssertions.Formatting.TimeSpanValueFormatter.ToString(System.Object,FluentAssertions.Common.UniqueObjectTracker,System.Int32)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <param name="uniqueObjectTracker">
            An object that is passed through recursive calls and which should be used to detect circular references
            in the object graph that is being converted to a string representation.</param>
            <param name="nestedPropertyLevel">
                The level of nesting for the supplied value. This is used for indenting the format string for objects that have
                no <see cref="M:System.Object.ToString"/> override.
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FluentAssertions.Formatting.XAttributeValueFormatter.ToString(System.Object,FluentAssertions.Common.UniqueObjectTracker,System.Int32)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <param name="uniqueObjectTracker">
            An object that is passed through recursive calls and which should be used to detect circular references
            in the object graph that is being converted to a string representation.</param>
            <param name="nestedPropertyLevel">
                The level of nesting for the supplied value. This is used for indenting the format string for objects that have
                no <see cref="M:System.Object.ToString"/> override.
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FluentAssertions.Formatting.XDocumentValueFormatter.ToString(System.Object,FluentAssertions.Common.UniqueObjectTracker,System.Int32)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <param name="uniqueObjectTracker">
            An object that is passed through recursive calls and which should be used to detect circular references
            in the object graph that is being converted to a string representation.</param>
            <param name="nestedPropertyLevel">
                The level of nesting for the supplied value. This is used for indenting the format string for objects that have
                no <see cref="M:System.Object.ToString"/> override.
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:FluentAssertions.Formatting.XElementValueFormatter.ToString(System.Object,FluentAssertions.Common.UniqueObjectTracker,System.Int32)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="value">The value for which to create a <see cref="T:System.String"/>.</param>
            <param name="uniqueObjectTracker">
            An object that is passed through recursive calls and which should be used to detect circular references
            in the object graph that is being converted to a string representation.</param>
            <param name="nestedPropertyLevel">
                The level of nesting for the supplied value. This is used for indenting the format string for objects that have
                no <see cref="M:System.Object.ToString"/> override.
            </param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:FluentAssertions.Frameworks.FallbackTestFramework">
            <summary>
            Throws a generic exception in case no other test harness is detected.
            </summary>
        </member>
        <member name="T:FluentAssertions.Frameworks.ITestFramework">
            <summary>
            Represents an abstraction of a particular test framework such as MSTest, nUnit, etc.
            </summary>
        </member>
        <member name="M:FluentAssertions.Frameworks.ITestFramework.Throw(System.String)">
            <summary>
            Throws a framework-specific exception to indicate a failing unit test.
            </summary>
        </member>
        <member name="P:FluentAssertions.Frameworks.ITestFramework.IsAvailable">
            <summary>
            Gets a value indicating whether the corresponding test framework is currently available.
            </summary>
        </member>
        <member name="M:FluentAssertions.Frameworks.FallbackTestFramework.Throw(System.String)">
            <summary>
            Throws a framework-specific exception to indicate a failing unit test.
            </summary>
        </member>
        <member name="P:FluentAssertions.Frameworks.FallbackTestFramework.IsAvailable">
            <summary>
            Gets a value indicating whether the corresponding test framework is currently available.
            </summary>
        </member>
        <member name="T:FluentAssertions.Verification">
            <summary>
            Provides a fluent API for verifying an arbitrary condition.
            </summary>
        </member>
        <member name="F:FluentAssertions.Verification.ReasonTag">
            <summary>
            Represents the phrase that can be used in <see cref="M:FluentAssertions.Verification.FailWith(System.String,System.Object[])"/> as a placeholder for the reason of an assertion.
            </summary>
        </member>
        <member name="M:FluentAssertions.Verification.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentAssertions.Verification"/> class.
            </summary>
        </member>
        <member name="M:FluentAssertions.Verification.SubjectNameOr(System.String)">
            <summary>
            Gets the name or identifier of the current subject, or a default value if the subject is not known.
            </summary>
        </member>
        <member name="M:FluentAssertions.Verification.ForCondition(System.Boolean)">
            <summary>
            Specify the condition that must be satisfied.
            </summary>
            <param name="condition">If <c>true</c> the verification will be succesful.</param>
        </member>
        <member name="M:FluentAssertions.Verification.ForCondition(System.Func{System.Boolean})">
            <summary>
            Specify a predicate that with the condition that must be satisfied.
            </summary>
        </member>
        <member name="M:FluentAssertions.Verification.BecauseOf(System.String,System.Object[])">
            <summary>
            Specify the reason why you expect the condition to be <c>true</c>.
            </summary>
            <param name="reason">
            A formatted phrase explaining why the condition should be satisfied. If the phrase does not 
            start with the word <i>because</i>, it is prepended to the message.
            </param>
            <param name="reasonArgs">
            Zero or more values to use for filling in any <see cref="M:System.String.Format(System.String,System.Object[])"/> compatible placeholders.
            </param>
        </member>
        <member name="M:FluentAssertions.Verification.FailWith(System.String,System.Object[])">
            <summary>
            Define the failure message for the verification.
            </summary>
            <remarks>
            If the <paramref name="failureMessage"/> contains the text "{reason}", this will be replaced by the reason as
            defined through <see cref="M:FluentAssertions.Verification.BecauseOf(System.String,System.Object[])"/>. Only 10 <paramref name="failureArgs"/> are supported in combination with
            a {reason}.
            </remarks>
            <param name="failureMessage">The format string that represents the failure message.</param>
            <param name="failureArgs">Optional arguments for the <paramref name="failureMessage"/></param>
        </member>
        <member name="P:FluentAssertions.Verification.UsingLineBreaks">
            <summary>
            Indicates that every argument passed into <see cref="M:FluentAssertions.Verification.FailWith(System.String,System.Object[])"/> is displayed on a separate line.
            </summary>
        </member>
        <member name="P:FluentAssertions.Verification.SubjectName">
            <summary>
            Gets or sets the name of the subject for the next verification.
            </summary>
        </member>
    </members>
</doc>
